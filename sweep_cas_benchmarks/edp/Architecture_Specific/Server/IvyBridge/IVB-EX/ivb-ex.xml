<?xml version="1.0"?>
<root>
	<metric name="metric_CPU operating frequency (in GHz)">
        <event alias="a">CPU_CLK_UNHALTED.THREAD</event>
		<event alias="b">CPU_CLK_UNHALTED.REF_TSC</event>
		<constant alias="c">system.tsc_freq</constant>      
		<formula>(a/b*c)/1000000000</formula>
	</metric>

	<metric name="metric_CPU utilization %">
		<event alias="a">CPU_CLK_UNHALTED.REF_TSC</event>
		<event alias="b">TSC</event>
		<formula>100*a/b</formula>
	</metric>

	<metric name="metric_CPU utilization% in kernel mode">
		<event alias="a">CPU_CLK_UNHALTED.REF_TSC:SUP</event>
		<event alias="b">TSC</event>
		<formula>100*a/b</formula>
	</metric>

    <metric name="metric_CPI">
        <throughput-metric-name>metric_cycles per txn</throughput-metric-name>
        <event alias="a">CPU_CLK_UNHALTED.THREAD</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_kernel_CPI">
        <event alias="a">CPU_CLK_UNHALTED.THREAD:SUP</event>
        <event alias="b">INST_RETIRED.ANY:SUP</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_% cycles uops retired">
        <event alias="a">UOPS_RETIRED.ALL:c1</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*a/b</formula>
    </metric>
	
	<metric name="metric_branch mispredict ratio">
		<event alias="a">BR_MISP_RETIRED.ALL_BRANCHES</event>
		<event alias="b">BR_INST_RETIRED.ALL_BRANCHES</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_loads per instr">
        <throughput-metric-name>metric_loads per txn</throughput-metric-name>
		<event alias="a">MEM_UOPS_RETIRED.ALL_LOADS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_stores per instr">
        <throughput-metric-name>metric_stores per txn</throughput-metric-name>
		<event alias="a">MEM_UOPS_RETIRED.ALL_STORES</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>	

	<metric name="metric_locks retired per instr">
        <throughput-metric-name>metric_locks retired per txn</throughput-metric-name>
		<event alias="a">MEM_UOPS_RETIRED.LOCK_LOADS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>	

	<metric name="metric_uncacheable reads per instr">
        <throughput-metric-name>metric_uncacheable reads per txn</throughput-metric-name>
		<event alias="a">UNC_C_TOR_INSERTS.MISS_OPCODE/Match=0x187</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>	

	<metric name="metric_streaming stores (full line) per instr">
        <throughput-metric-name>metric_streaming stores (full line) per txn</throughput-metric-name>
		<event alias="a">UNC_C_TOR_INSERTS.OPCODE/Match=0x18c</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>	

	<metric name="metric_streaming stores (partial line) per instr">
        <throughput-metric-name>metric_streaming stores (partial line) per txn</throughput-metric-name>
		<event alias="a">UNC_C_TOR_INSERTS.OPCODE/Match=0x18d</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>	


	<metric name="metric_L1D MPI (includes data+rfo w/ prefetches)">
        <throughput-metric-name>metric_L1D misses per txn (includes data+rfo w/ prefetches)</throughput-metric-name>
		<event alias="a">L1D.REPLACEMENT</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_L1D demand data read hits per instr">
        <throughput-metric-name>metric_L1D demand data read hits per txn</throughput-metric-name>
		<event alias="a">MEM_LOAD_UOPS_RETIRED.L1_HIT</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_L1-I code read misses (w/ prefetches) per instr">
        <throughput-metric-name>metric_L1I code read misses (includes prefetches) per txn</throughput-metric-name>
		<event alias="a">L2_RQSTS.ALL_CODE_RD</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_L2 demand data read hits per instr">
        <throughput-metric-name>metric_L2 demand data read hits per txn</throughput-metric-name>
		<event alias="a">MEM_LOAD_UOPS_RETIRED.L2_HIT</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_L2 MPI (includes code+data+rfo w/ prefetches)">
        <throughput-metric-name>metric_L2 misses per txn (includes code+data+rfo w/ prefetches)</throughput-metric-name>
		<event alias="a">L2_LINES_IN.ALL</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>
	
 	<metric name="metric_L2 demand data read MPI">
        <throughput-metric-name>metric_L2 demand data read misses per txn</throughput-metric-name>
		<event alias="a">MEM_LOAD_UOPS_RETIRED.L2_MISS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>
	
	<metric name="metric_L2 demand code MPI">
        <throughput-metric-name>metric_L2 demand code misses per txn</throughput-metric-name>
		<event alias="a">L2_RQSTS.CODE_RD_MISS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>
	
	<metric name="metric_L2 Any local request that HITM in a sibling core (per instr)">
        <throughput-metric-name>metric_L2 Any local request that HITM in a sibling core per txn</throughput-metric-name>
		<event alias="a">OFFCORE_RESPONSE.ALL_READS.LLC_HIT.HITM_OTHER_CORE_1</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_L2 read miss latency (in core clocks) - BROKEN">
		<event alias="a">OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD</event>
		<event alias="b">OFFCORE_REQUESTS.DEMAND_DATA_RD</event>
		<formula>a/b</formula>
	</metric>
	
	<metric name="metric_LLC MPI (includes code+data+rfo w/ prefetches)">
        <throughput-metric-name>metric_LLC misses per txn (includes code+data+rfo w/ prefetches)</throughput-metric-name>
		<event alias="a">OFFCORE_RESPONSE.ALL_READS.LLC_MISS.ANY_RESPONSE_0</event>
		<event alias="b">UNC_C_TOR_INSERTS.MISS_OPCODE/Match=0x1c8</event>
		<event alias="c">INST_RETIRED.ANY</event>
		<formula>(a-b)/c</formula>
	</metric>

	<metric name="metric_LLC data read MPI (includes prefetches)">
        <throughput-metric-name>metric_LLC data read misses per txn (includes prefetches)</throughput-metric-name>
		<event alias="a">OFFCORE_RESPONSE.ALL_DATA_RD.LLC_MISS.ANY_RESPONSE_0</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_LLC code read MPI (includes prefetches)">
        <throughput-metric-name>metric_LLC code read misses per txn (includes prefetches)</throughput-metric-name>
		<event alias="a">OFFCORE_RESPONSE.ALL_CODE_RD.LLC_MISS.ANY_RESPONSE_0</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_LLC LLC prefetch data read MPI">
        <throughput-metric-name>metric_LLC LLC data prefetch read misses per txn</throughput-metric-name>
		<event alias="a">UNC_C_TOR_INSERTS.MISS_OPCODE/Match=0x192</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_LLC LLC prefetch RFO read MPI">
        <throughput-metric-name>metric_LLC LLC RFO prefetch read misses per txn</throughput-metric-name>
		<event alias="a">UNC_C_TOR_INSERTS.MISS_OPCODE/Match=0x190</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_LLC LLC prefetch code read MPI">
        <throughput-metric-name>metric_LLC LLC code prefetch read misses per txn</throughput-metric-name>
		<event alias="a">UNC_C_TOR_INSERTS.MISS_OPCODE/Match=0x191</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_LLC demand data read hits per instr">
        <throughput-metric-name>metric_LLC demand data read hits per txn</throughput-metric-name>
		<event alias="a">MEM_LOAD_UOPS_RETIRED.LLC_HIT</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_LLC demand data read MPI">
        <throughput-metric-name>metric_LLC demand data read misses per txn</throughput-metric-name>
		<event alias="a">MEM_LOAD_UOPS_RETIRED.LLC_MISS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_LLC total HITM (per instr)">
        <throughput-metric-name>metric_LLC total HITM per txn</throughput-metric-name>
		<event alias="a">OFFCORE_RESPONSE.ALL_READS.LLC_MISS.REMOTE_HITM_1</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_LLC total HIT clean line forwards (per instr)">
        <throughput-metric-name>metric_LLC total HIT clean line forwards per txn</throughput-metric-name>
		<event alias="a">OFFCORE_RESPONSE.ALL_READS.LLC_MISS.REMOTE_HIT_FORWARD_0</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

    <metric name="metric_LLC writebacks per instr">
        <throughput-metric-name>metric_LLC writebacks per txn</throughput-metric-name>
        <event alias="a">UNC_C_LLC_VICTIMS.M_STATE</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
    </metric>

    <metric name="metric_Average LLC data read (demand+prefetch) miss latency (in ns)">
        <event alias="a">UNC_C_TOR_OCCUPANCY.MISS_OPCODE/Match=0x182</event>
        <event alias="b">UNC_C_TOR_INSERTS.MISS_OPCODE/Match=0x182</event>
        <event alias="c">CPU_CLK_UNHALTED.THREAD</event>
        <event alias="d">CPU_CLK_UNHALTED.REF_TSC</event>
        <constant alias="e">system.tsc_freq</constant>
        <formula>1000000000*(a/b)/(c/d*e)</formula>
    </metric>

    <metric name="metric_Average LLC data read (demand+prefetch) miss latency (in core clk)">
        <event alias="a">UNC_C_TOR_OCCUPANCY.MISS_OPCODE/Match=0x182</event>
        <event alias="b">UNC_C_TOR_INSERTS.MISS_OPCODE/Match=0x182</event>
        <formula>a/b</formula>
    </metric>
 
	<metric name="metric_ITLB MPI">
        <throughput-metric-name>metric_ITLB misses per txn</throughput-metric-name>
		<event alias="a">ITLB_MISSES.WALK_COMPLETED</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_ITLB large page MPI">
        <throughput-metric-name>metric_ITLB large page misses per txn</throughput-metric-name>
		<event alias="a">ITLB_MISSES.LARGE_PAGE_WALK_COMPLETED</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_ITLB load miss latency (in core clks)">
		<event alias="a">ITLB_MISSES.WALK_DURATION</event>
		<event alias="b">ITLB_MISSES.WALK_COMPLETED</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_DTLB load MPI">
        <throughput-metric-name>metric_DTLB load misses per txn</throughput-metric-name>
		<event alias="a">DTLB_LOAD_MISSES.DEMAND_LD_WALK_COMPLETED</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_DTLB large page load MPI">
        <throughput-metric-name>metric_DTLB large page load misses per txn</throughput-metric-name>
		<event alias="a">DTLB_LOAD_MISSES.LARGE_PAGE_WALK_COMPLETED</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_DTLB store MPI">
        <throughput-metric-name>metric_DTLB store misses per txn</throughput-metric-name>
		<event alias="a">DTLB_STORE_MISSES.WALK_COMPLETED</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_DTLB load miss latency (in core clks)">
		<event alias="a">DTLB_LOAD_MISSES.DEMAND_LD_WALK_DURATION</event>
		<event alias="b">DTLB_LOAD_MISSES.DEMAND_LD_WALK_COMPLETED</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_DTLB store miss latency (in core clks)">
		<event alias="a">DTLB_STORE_MISSES.WALK_DURATION</event>
		<event alias="b">DTLB_STORE_MISSES.WALK_COMPLETED</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_NUMA %_Reads satisfied by local DRAM (LLC prefetches excluded)">
		<event alias="a">OFFCORE_RESPONSE.ALL_READS.LLC_MISS.LOCAL_DRAM_0</event>
		<event alias="b">OFFCORE_RESPONSE.ALL_READS.LLC_MISS.ANY_RESPONSE_1:m0x1FFFC00077</event>
		<formula>100*(a/b)</formula>
	</metric>

	<metric name="metric_NUMA %_Reads satisfied by remote DRAM (LLC prefetches excluded)">
		<event alias="a">OFFCORE_RESPONSE.ALL_READS.LLC_MISS.LOCAL_DRAM_0</event>
		<event alias="b">OFFCORE_RESPONSE.ALL_READS.LLC_MISS.REMOTE_HITM_1:m0x187FC00077</event>
		<event alias="c">OFFCORE_RESPONSE.ALL_READS.LLC_MISS.ANY_RESPONSE_1:m0x1FFFC00077</event>
		<formula>100*(c-a-b)/c</formula>
	</metric>

	<metric name="metric_NUMA %_Reads satisfied by remote caches (Hitm+HitF; LLC prefetches excluded)">
		<event alias="a">OFFCORE_RESPONSE.ALL_READS.LLC_MISS.REMOTE_HITM_1:m0x187FC00077</event>
		<event alias="b">OFFCORE_RESPONSE.ALL_READS.LLC_MISS.ANY_RESPONSE_1:m0x1FFFC00077</event>
		<formula>100*(a/b)</formula>
	</metric>

	<metric name="metric_NUMA %_Reads that are code misses and satisfied by remote caches)">
		<event alias="a">OFFCORE_RESPONSE.ALL_CODE_RD.LLC_MISS.REMOTE_HIT_FORWARD_1</event>
		<event alias="b">OFFCORE_RESPONSE.ALL_READS.LLC_MISS.ANY_RESPONSE_1:m0x1FFFC00077</event>
		<formula>100*(a/b)</formula>
	</metric>

	<metric name="metric_NUMA %_Reads that are code misses and satisfied by remote memory)">
		<event alias="a">OFFCORE_RESPONSE.ALL_CODE_RD.LLC_MISS.REMOTE_DRAM_0</event>
		<event alias="b">OFFCORE_RESPONSE.ALL_READS.LLC_MISS.ANY_RESPONSE_1:m0x1FFFC00077</event>
		<formula>100*(a/b)</formula>
	</metric>

    <metric name="metric_QPI speed - GT/s">
        <event alias="a">UNC_Q_CLOCKTICKS</event>
        <!-- 4 means there are 4 R3QPI in system -->
        <formula>a/4*8/1000000000</formula>
        <formula socket="0">a[0]/2*8/1000000000</formula>
        <formula socket="1">a[1]/2*8/1000000000</formula>
        <formula socket="2">a[2]/2*8/1000000000</formula>
        <formula socket="3">a[3]/2*8/1000000000</formula>
    </metric>

    <metric name="metric_QPI Data transmit BW (MB/sec) (only data)">
        <event alias="a">UNC_Q_TxL_FLITS_G0.DATA</event>
        <formula>a*8/1000000</formula>
    </metric>

    <metric name="metric_QPI total transmit BW (MB/sec) (includes control)">
        <event alias="a">UNC_Q_TxL_FLITS_G0.DATA</event>
        <event alias="b">UNC_Q_TxL_FLITS_G0.NON_DATA</event>
        <formula>(a+b)*8/1000000</formula>
    </metric>

    <metric name="metric_QPI Transmit utilization_% (includes control)">
        <event alias="a">UNC_Q_CLOCKTICKS</event>
        <event alias="b">UNC_Q_TxL_FLITS_G0.DATA</event>
        <event alias="c">UNC_Q_TxL_FLITS_G0.NON_DATA</event>
        <formula>100*(b+c)/(2*a)</formula>
    </metric>

    <metric name="metric_QPI % cycles transmit link is half-width (L0p)">
        <event alias="a">UNC_Q_TxL0p_POWER_CYCLES</event>
        <event alias="b">UNC_Q_CLOCKTICKS</event>
        <formula>100*(a/b)</formula>
    </metric>

    <metric name="metric_QPI % cycles receive link is half-width (L0p)">
        <event alias="a">UNC_Q_RxL0p_POWER_CYCLES</event>
        <event alias="b">UNC_Q_CLOCKTICKS</event>
        <formula>100*(a/b)</formula>
    </metric>

    <metric name="metric_QPI % cycles receive link is in L0s sleep state">
        <event alias="a">UNC_Q_RxL0S_POWER_CYCLES</event>
        <event alias="b">UNC_Q_CLOCKTICKS</event>
        <formula>100*(a/b)</formula>
    </metric>

    <metric name="metric_QPI % cycles transmit link is in L0s sleep state">
        <event alias="a">UNC_Q_TxL0S_POWER_CYCLES</event>
        <event alias="b">UNC_Q_CLOCKTICKS</event>
        <formula>100*(a/b)</formula>
    </metric>


    <metric name="metric_HA - Reads vs. all requests">
      <event alias="a">UNC_H_REQUESTS.READS</event>
      <event alias="b">UNC_H_REQUESTS.WRITES</event>
      <formula>a/(a+b)</formula>
    </metric>

    <metric name="metric_HA - Writes vs. all requests">
      <event alias="a">UNC_H_REQUESTS.READS</event>
      <event alias="b">UNC_H_REQUESTS.WRITES</event>
      <formula>b/(a+b)</formula>
    </metric>

    <metric name="metric_HA - Hit M line forwards">
        <throughput-metric-name>metric_HA Hit M line forwards per txn</throughput-metric-name>
      <event alias="a">UNC_H_SNOOP_RESP.RSP_FWD_WB</event>
      <event alias="b">UNC_H_SNOOP_RESP.RSPIFWD</event>
        <event alias="c">INST_RETIRED.ANY</event>
      <formula>(a+b)/c</formula>
    </metric>

    <metric name="metric_HA - Hit clean line forwards">
        <throughput-metric-name>metric_HA Hit clean line forwards per txn</throughput-metric-name>
      <event alias="a">UNC_H_SNOOP_RESP.RSPSFWD</event>
        <event alias="b">INST_RETIRED.ANY</event>
      <formula>a/b</formula>
    </metric>

    <metric name="metric_DDR data rate (MT/sec)">
        <event alias="a">UNC_M_CLOCKTICKS</event>
        <constant alias="b"> system.sockets.count </constant>
        <!-- Assumed 4 memory channels populated in each socket -->
        <formula>2*a/(b*4)/1000000</formula>
    </metric>

    <metric name="metric_memory bandwidth read (MB/sec)">
        <event alias="a">UNC_M_CAS_COUNT.RD</event>
        <formula>a*64/1000000</formula>
    </metric>

    <metric name="metric_memory bandwidth write (MB/sec)">
        <event alias="a">UNC_M_CAS_COUNT.WR</event>
        <formula>a*64/1000000</formula>
    </metric>

    <metric name="metric_memory bandwidth total (MB/sec)">
        <event alias="a">UNC_M_CAS_COUNT.RD</event>
        <event alias="b">UNC_M_CAS_COUNT.WR</event>
        <formula>(a+b)*64/1000000</formula>
    </metric>

    <metric name="metric_IO_bandwidth_disk_or_network_writes (MB/sec)">
        <event alias="a">UNC_C_TOR_INSERTS.OPCODE/Match=0x19e</event>
        <event alias="b">UNC_C_TOR_INSERTS.OPCODE/Match=0x1e4</event>
        <formula>(a+b)*64/1000000</formula>
    </metric>

    <metric name="metric_IO_bandwidth_disk_or_network_reads (MB/sec)">
        <event alias="a">UNC_C_TOR_INSERTS.OPCODE/Match=0x19c</event>
        <event alias="b">UNC_C_TOR_INSERTS.OPCODE/Match=0x1e6</event>
        <formula>(a+b)*64/1000000</formula>
    </metric>

    <metric name="metric_IO_number of partial PCI writes per sec">
        <event alias="a">UNC_C_TOR_INSERTS.OPCODE/Match=0x1e5</event>
        <!-- +0 is added to work-around a bug -->
        <formula>a+0</formula>
    </metric>

    <metric name="metric_IO_number of partial PCI reads per sec">
        <event alias="a">UNC_C_TOR_INSERTS.OPCODE/Match=0x195</event>
        <!-- +0 is added to work-around a bug -->
        <formula>a+0</formula>
    </metric>

    <metric name="metric_IO_write cache miss(disk/network reads) bandwidth (MB/sec)">
        <event alias="a">UNC_C_TOR_INSERTS.MISS_OPCODE/Match=0x19c</event>
        <event alias="b">UNC_C_TOR_INSERTS.MISS_OPCODE/Match=0x1e6</event>
        <formula>(a+b)*64/1000000</formula>
    </metric>

    <metric name="metric_IO_read cache miss(disk/network writes) bandwidth (MB/sec)">
        <event alias="a">UNC_C_TOR_INSERTS.MISS_OPCODE/Match=0x19e</event>
        <event alias="b">UNC_C_TOR_INSERTS.MISS_OPCODE/Match=0x1e4</event>
        <formula>(a+b)*64/1000000</formula>
    </metric>

    <metric name="metric_memory reads vs. all requests">
        <event alias="a">UNC_M_CAS_COUNT.RD</event>
        <event alias="b">UNC_M_CAS_COUNT.WR</event>
        <formula>a/(a+b)</formula>
    </metric>

    <metric name="metric_memory Page Empty vs. all requests">
        <event alias="a">UNC_M_ACT_COUNT.RD:u0x3</event>
        <event alias="b">UNC_M_PRE_COUNT.PAGE_MISS</event>
        <event alias="c">UNC_M_CAS_COUNT.RD</event>
        <event alias="d">UNC_M_CAS_COUNT.WR</event>
        <formula>(a-b)/(c+d)</formula>
    </metric>

    <metric name="metric_memory Page Misses vs. all requests">
        <event alias="b">UNC_M_PRE_COUNT.PAGE_MISS</event>
        <event alias="c">UNC_M_CAS_COUNT.RD</event>
        <event alias="d">UNC_M_CAS_COUNT.WR</event>
        <formula>b/(c+d)</formula>
    </metric>

    <metric name="metric_memory Page Hits vs. all requests">
        <event alias="a">UNC_M_ACT_COUNT.RD:u0x3</event>
        <event alias="c">UNC_M_CAS_COUNT.RD</event>
        <event alias="d">UNC_M_CAS_COUNT.WR</event>
        <formula>1-a/(c+d)</formula>
    </metric>

    <metric name="metric_memory % Cycles where all DRAM ranks are in PPD mode">
        <event alias="a">UNC_M_POWER_CHANNEL_PPD</event>
        <event alias="b">UNC_M_CLOCKTICKS</event>
        <formula>100*a/b</formula>
    </metric>

    <metric name="metric_memory % Cycles all ranks in critical thermal throttle">
        <event alias="a">UNC_M_POWER_CRITICAL_THROTTLE_CYCLES</event>
        <event alias="b">UNC_M_CLOCKTICKS</event>
        <formula>100*a/b</formula>
    </metric>

    <metric name="metric_memory % Cycles Memory is in self refresh power mode">
        <event alias="a">UNC_M_POWER_SELF_REFRESH</event>
        <event alias="b">UNC_M_CLOCKTICKS</event>
        <formula>100*a/b</formula>
    </metric>

    <metric name="metric_power % cycles max frequency limited by thermal issues">
        <event alias="a">UNC_P_FREQ_MAX_LIMIT_THERMAL_CYCLES</event>
        <event alias="b">UNC_P_CLOCKTICKS</event>
        <formula>100*a/b</formula>
    </metric>

    <metric name="metric_power % cycles max frequency limited by OS">
        <event alias="a">UNC_P_FREQ_MAX_OS_CYCLES</event>
        <event alias="b">UNC_P_CLOCKTICKS</event>
        <formula>100*a/b</formula>
    </metric>

    <metric name="metric_power % cycles max frequency limited by power">
        <event alias="a">UNC_P_FREQ_MAX_POWER_CYCLES</event>
        <event alias="b">UNC_P_CLOCKTICKS</event>
        <formula>100*a/b</formula>
    </metric>

	<metric name="metric_ItoM operations (fast strings) that reference LLC per instr">
        <throughput-metric-name>metric_ItoM operations (fast strings) that reference LLC per txn</throughput-metric-name>
		<event alias="a">UNC_C_TOR_INSERTS.OPCODE/Match=0x1c8</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>
		
	<metric name="metric_ItoM operations (fast strings) that miss LLC per instr">
        <throughput-metric-name>metric_ItoM operations (fast strings) that miss LLC per txn</throughput-metric-name>
		<event alias="a">UNC_C_TOR_INSERTS.MISS_OPCODE/Match=0x1c8</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>
		
	<metric name="metric_Topdown Frontend bound (%)">
		<event alias="a">IDQ_UOPS_NOT_DELIVERED.CORE</event>
		<event alias="b">CPU_CLK_UNHALTED.THREAD</event>
		<formula>100*a/(4*b)</formula>
	</metric>

    <metric name="metric_Topdown Retiring (%)">
        <event alias="a">UOPS_RETIRED.RETIRE_SLOTS</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
      <formula>100*a/(4*b)</formula>
    </metric>

    <metric name="metric_Topdown Bad speculation (%)">
        <event alias="a">UOPS_ISSUED.ANY</event>
        <event alias="b">UOPS_RETIRED.RETIRE_SLOTS</event>
        <event alias="c">INT_MISC.RECOVERY_CYCLES</event>
        <event alias="d">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*(a-b+(4*c))/(4*d)</formula>
    </metric>

	<metric name="metric_Topdown Backend bound (%)">
		<event alias="a">IDQ_UOPS_NOT_DELIVERED.CORE</event>
    <event alias="b">UOPS_ISSUED.ANY</event>
    <event alias="c">INT_MISC.RECOVERY_CYCLES</event>
		<event alias="d">CPU_CLK_UNHALTED.THREAD</event>
		<formula>100-(100*(a+b+4*c)/(4*d))</formula>
	</metric>

    <metric name="metric_% cycles FE is delivering 0 uop per cycle when not Backend-bound">
        <event alias="a">IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*a/b</formula>
    </metric>

    <metric name="metric_% cycles FE is delivering only 1 uop per cycle when not Backend-bound">
        <event alias="a">IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_1_UOP_DELIV.CORE</event>
        <event alias="b">IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE</event>
        <event alias="c">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*(a-b)/c</formula>
    </metric>

    <metric name="metric_% cycles FE is delivering only 2 uops per cycle when not Backend-bound">
        <event alias="a">IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_2_UOP_DELIV.CORE</event>
        <event alias="b">IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_1_UOP_DELIV.CORE</event>
        <event alias="c">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*(a-b)/c</formula>
    </metric>

    <metric name="metric_% cycles FE is delivering only 3 uops per cycle when not Backend-bound">
        <event alias="a">IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_3_UOP_DELIV.CORE</event>
        <event alias="b">IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_2_UOP_DELIV.CORE</event>
        <event alias="c">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*(a-b)/c</formula>
    </metric>

    <metric name="metric_% cycles when only zero uop is issued">
        <event alias="a">UOPS_ISSUED.ANY:c1</event>
        <event alias="c">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*(c-a)/c</formula>
    </metric>

    <metric name="metric_% cycles when only one uop is issued">
        <event alias="a">UOPS_ISSUED.ANY:c1</event>
        <event alias="b">UOPS_ISSUED.ANY:c2</event>
        <event alias="c">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*(a-b)/c</formula>
    </metric>

    <metric name="metric_% cycles when only 2 uops are issued">
        <event alias="a">UOPS_ISSUED.ANY:c2</event>
        <event alias="b">UOPS_ISSUED.ANY:c3</event>
        <event alias="c">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*(a-b)/c</formula>
    </metric>

    <metric name="metric_% cycles when only 3 uops are issued">
        <event alias="a">UOPS_ISSUED.ANY:c3</event>
        <event alias="b">UOPS_ISSUED.ANY:c4</event>
        <event alias="c">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*(a-b)/c</formula>
    </metric>

    <metric name="metric_% cycles when 4 uops are issued">
        <event alias="a">UOPS_ISSUED.ANY:c4</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>(100*a)/b</formula>
    </metric>

    <metric name="metric_% cycles no UOPS are executed">
        <event alias="a">UOPS_EXECUTED.CYCLES_GE_1_UOP_EXEC</event>
        <event alias="c">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*(c-a)/c</formula>
    </metric>

    <metric name="metric_% cycles UOPS executed on one port">
        <event alias="a">UOPS_EXECUTED.CYCLES_GE_1_UOP_EXEC</event>
        <event alias="b">UOPS_EXECUTED.CYCLES_GE_2_UOPS_EXEC</event>
        <event alias="c">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*(a-b)/c</formula>
    </metric>

    <metric name="metric_% cycles UOPS executed on 2 ports">
        <event alias="a">UOPS_EXECUTED.CYCLES_GE_2_UOPS_EXEC</event>
        <event alias="b">UOPS_EXECUTED.CYCLES_GE_3_UOPS_EXEC</event>
        <event alias="c">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*(a-b)/c</formula>
    </metric>

    <metric name="metric_% cycles UOPS executed on 3 or more ports">
        <event alias="a">UOPS_EXECUTED.CYCLES_GE_3_UOPS_EXEC</event>
        <event alias="c">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*a/c</formula>
    </metric>
    <metric name="metric_% cycles when only zero uop is retired">
        <event alias="a">UOPS_RETIRED.ALL:c1</event>
        <event alias="c">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*(c-a)/c</formula>
    </metric>

    <metric name="metric_% cycles when only one uop is retired">
        <event alias="a">UOPS_RETIRED.ALL:c1</event>
        <event alias="b">UOPS_RETIRED.ALL:c2</event>
        <event alias="c">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*(a-b)/c</formula>
    </metric>
    <metric name="metric_% cycles when only 2 uops are retired">
        <event alias="a">UOPS_RETIRED.ALL:c2</event>
        <event alias="b">UOPS_RETIRED.ALL:c3</event>
        <event alias="c">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*(a-b)/c</formula>
    </metric>

    <metric name="metric_% cycles when only 3 uops are retired">
        <event alias="a">UOPS_RETIRED.ALL:c3</event>
        <event alias="b">UOPS_RETIRED.ALL:c4</event>
        <event alias="c">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*(a-b)/c</formula>
    </metric>

    <metric name="metric_% cycles when 4 or more uops are retired">
        <event alias="a">UOPS_RETIRED.ALL:c4</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>(100*a)/b</formula>
    </metric>

    <metric name="metric_% cycles spent in resource stalls">
        <event alias="a">RESOURCE_STALLS.ANY</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*(a/b)</formula>
    </metric>

    <metric name="metric_% cycles RS is empty">
        <event alias="a">RS_EVENTS.EMPTY_CYCLES</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*a/b</formula>
    </metric>

    <metric name="metric_% Uops delivered from decoded Icache (DSB)">
        <event alias="a">IDQ.DSB_UOPS</event>
        <event alias="b">UOPS_ISSUED.ANY</event>
        <formula>100*(a/b)</formula>
    </metric>

    <metric name="metric_% Uops delivered from legacy decode pipeline (MITE)">
        <event alias="a">IDQ.MITE_UOPS</event>
        <event alias="b">UOPS_ISSUED.ANY</event>
        <formula>100*(a/b)</formula>
    </metric>

    <metric name="metric_% Uops delivered from microcode sequencer (MS)">
        <event alias="a">IDQ.MS_UOPS</event>
        <event alias="b">UOPS_ISSUED.ANY</event>
        <formula>100*(a/b)</formula>
    </metric>

    <metric name="metric_% Uops delivered from loop stream detector (LSD)">
        <event alias="a">IDQ.MITE_UOPS</event>
        <event alias="b">IDQ.MS_UOPS</event>
        <event alias="c">IDQ.DSB_UOPS</event>
        <event alias="d">UOPS_ISSUED.ANY</event>
        <formula>100*(d-a-b-c)/d</formula>
    </metric>

    <metric name="metric_% cycles spent in switching from DSB to MITE">
        <event alias="a">DSB2MITE_SWITCHES.PENALTY_CYCLES</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*(a/b)</formula>
    </metric>

	<metric name="metric_DRAM power (watts)">
		<event alias="a">FREERUN_DRAM_ENERGY_STATUS</event>
		<formula>a*15.3/1000000</formula>
	</metric>
	
	<metric name="metric_primary plane (core+LLC+Ring) power (watts)">
		<event alias="a">FREERUN_CORE_ENERGY_STATUS</event>
		<formula>a*15.3/1000000</formula>
	</metric>

	<metric name="metric_package power (watts)">
		<event alias="a">FREERUN_PKG_ENERGY_STATUS</event>
		<formula>a*15.3/1000000</formula>
	</metric>

	<metric name="metric_core c3 residency %">
		<event alias="a">FREERUN_CORE_C3_RESIDENCY</event>
		<event alias="b">TSC</event>
		<formula>100*a/b</formula>
	</metric>

	<metric name="metric_core c6 residency %">
		<event alias="a">FREERUN_CORE_C6_RESIDENCY</event>
		<event alias="b">TSC</event>
		<formula>100*a/b</formula>
	</metric>

	<metric name="metric_package c2 residency %">
		<event alias="a">FREERUN_PKG_C2_RESIDENCY</event>
		<event alias="b">TSC</event>
		<formula>100*a/b</formula>
	</metric>
	
	<metric name="metric_package c3 residency %">
		<event alias="a">FREERUN_PKG_C3_RESIDENCY</event>
		<event alias="b">TSC</event>
		<formula>100*a/b</formula>
	</metric>
	
	<metric name="metric_package c6 residency %">
		<event alias="a">FREERUN_PKG_C6_RESIDENCY</event>
		<event alias="b">TSC</event>
		<formula>100*a/b</formula>
	</metric>
	

	<metric name="metric_SSE FP scalar single-precision uops executed per instr">
        <throughput-metric-name>metric_SSE FP scalar single-precision uops executed per txn</throughput-metric-name>
		<event alias="a">FP_COMP_OPS_EXE.SSE_SCALAR_SINGLE</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_SSE FP scalar double-precision uops executed per instr">
        <throughput-metric-name>metric_SSE FP scalar double-precision uops executed per txn</throughput-metric-name>
		<event alias="a">FP_COMP_OPS_EXE.SSE_SCALAR_DOUBLE</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_SSE FP packed single-precision uops executed per instr">
        <throughput-metric-name>metric_SSE FP packed single-precision uops executed per txn</throughput-metric-name>
		<event alias="a">FP_COMP_OPS_EXE.SSE_PACKED_SINGLE</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_SSE FP packed double-precision uops executed per instr">
        <throughput-metric-name>metric_SSE FP packed double-precision uops executed per txn</throughput-metric-name>
		<event alias="a">FP_COMP_OPS_EXE.SSE_PACKED_DOUBLE</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>
		
    <metric name="metric_LLC Q depth for local requests (valid only in socket view)">
        <event alias="a">UNC_C_TOR_OCCUPANCY.MISS_LOCAL</event>
        <event alias="b">UNC_C_CLOCKTICKS</event>
      <constant alias="c">system.sockets[0].cores.count</constant>      
        <formula>(a*c)/b</formula>
    </metric>

    <metric name="metric_LLC Q depth for remote requests (valid only in socket view)">
        <event alias="a">UNC_C_TOR_OCCUPANCY.MISS_REMOTE</event>
        <event alias="b">UNC_C_CLOCKTICKS</event>
      <constant alias="c">system.sockets[0].cores.count</constant>      
        <formula>(a*c)/b</formula>
    </metric>


</root>