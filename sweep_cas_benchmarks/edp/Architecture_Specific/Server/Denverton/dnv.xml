<?xml version="1.0"?>
<root>
	<metric name="metric_CPU operating frequency (in GHz)">
        <event alias="a">CPU_CLK_UNHALTED.CORE</event>
		<event alias="b">CPU_CLK_UNHALTED.REF_TSC</event>
		<constant alias="c">system.tsc_freq</constant>      
		<formula>(a/b*c)/1000000000</formula>
	</metric>

	<metric name="metric_CPU utilization %">
		<event alias="a">CPU_CLK_UNHALTED.REF_TSC</event>
		<event alias="b">TSC</event>
		<formula>100*a/b</formula>
	</metric>

	<metric name="metric_CPU utilization% in kernel mode">
		<event alias="a">CPU_CLK_UNHALTED.REF_TSC:SUP</event>
		<event alias="b">TSC</event>
		<formula>100*a/b</formula>
	</metric>

    <metric name="metric_CPI">
        <throughput-metric-name>metric_cycles per txn</throughput-metric-name>
        <event alias="a">CPU_CLK_UNHALTED.CORE</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_kernel_CPI">
        <event alias="a">CPU_CLK_UNHALTED.CORE:SUP</event>
        <event alias="b">INST_RETIRED.ANY:SUP</event>
        <formula>a/b</formula>
    </metric>

	<metric name="metric_branch mispredict ratio">
		<event alias="a">BR_MISP_RETIRED.ALL_BRANCHES</event>
		<event alias="b">BR_INST_RETIRED.ALL_BRANCHES</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_loads retired per instr">
        <throughput-metric-name>metric_loads retired per txn</throughput-metric-name>
		<event alias="a">MEM_UOPS_RETIRED.ALL_LOADS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_stores retired per instr">
        <throughput-metric-name>metric_stores retired per txn</throughput-metric-name>
		<event alias="a">MEM_UOPS_RETIRED.ALL_STORES</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>	

	<metric name="metric_loads splits per instr">
        <throughput-metric-name>metric_loads split per txn</throughput-metric-name>
		<event alias="a">MEM_UOPS_RETIRED.SPLIT_LOADS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>	

	<metric name="metric_stores splits per instr">
        <throughput-metric-name>metric_stores splits per txn</throughput-metric-name>
		<event alias="a">MEM_UOPS_RETIRED.SPLIT_STORES</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>	

	<metric name="metric_loads blocked due to store forwards per instr">
        <throughput-metric-name>metric_loads blocked due to store forwards per txn</throughput-metric-name>
		<event alias="a">LD_BLOCKS.STORE_FORWARD</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>	

	<metric name="metric_loads blocked due to store data not ready per instr">
        <throughput-metric-name>metric_loads blocked due to store data not ready per txn</throughput-metric-name>
		<event alias="a">REHABQ.LD_BLOCK_STD_NOTREADY</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>	

	<metric name="metric_locks retired per instr">
        <throughput-metric-name>metric_locks retired per txn</throughput-metric-name>
		<event alias="a">MEM_UOPS_RETIRED.LOCK_LOADS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>	

	<metric name="metric_L1D demand data read MPI">
        <throughput-metric-name>metric_L1D demand data read misses per txn</throughput-metric-name>
		<event alias="a">MEM_LOAD_UOPS_RETIRED.L1_MISS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_L1I code read misses (w/ prefetches) per instr">
        <throughput-metric-name>metric_L1I code read misses (includes prefetches) per txn</throughput-metric-name>
		<event alias="a">ICACHE.MISSES</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_L2 references per instr (includes code+data+rfo w/ prefetches)">
        <throughput-metric-name>metric_L2 references per txn (includes code+data+rfo w/ prefetches)</throughput-metric-name>
		<event alias="a">LONGEST_LAT_CACHE.REFERENCE</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_L2 MPI (includes code+data+rfo w/ prefetches)">
        <throughput-metric-name>metric_L2 misses per txn (includes code+data+rfo w/ prefetches)</throughput-metric-name>
		<event alias="a">LONGEST_LAT_CACHE.MISS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_L2 code MPI (includes prefetches)">
        <throughput-metric-name>metric_L2 code misses per txn (includes prefetches)</throughput-metric-name>
		<event alias="a">OFFCORE_RESPONSE:request=DEMAND_CODE_RD:response=L2_MISS.ANY</event>
		<event alias="c">INST_RETIRED.ANY</event>
		<formula>a/c</formula>
	</metric>
	
	<metric name="metric_L2 demand data read hits per instr">
        <throughput-metric-name>metric_L2 demand data read hits per txn</throughput-metric-name>
		<event alias="a">MEM_LOAD_UOPS_RETIRED.L2_HIT</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

 	<metric name="metric_L2 demand data read MPI">
        <throughput-metric-name>metric_L2 demand data read misses per txn</throughput-metric-name>
		<event alias="a">MEM_LOAD_UOPS_RETIRED.L2_MISS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

 	<metric name="metric_L2 read miss latency (in core clocks)">
		<event alias="a">OFFCORE_RESPONSE:request=DEMAND_DATA_RD:response=OUTSTANDING</event>
		<event alias="b">OFFCORE_RESPONSE:request=DEMAND_DATA_RD:response=L2_MISS.ANY</event>
		<formula>a/b</formula>
	</metric>
	
	<metric name="metric_L2 Any request that HITM in another core (per instr)">
        <throughput-metric-name>metric_L2 Any request that HITM in another core per txn</throughput-metric-name>
		<event alias="a">OFFCORE_RESPONSE:request=ANY_REQUEST:response=L2_MISS.HITM_OTHER_CORE</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

<!-- Broken event on Goldmont
	<metric name="metric_L2 Any request that HIT in another core and not forwarded(per instr)">
        <throughput-metric-name>metric_L2 Any request that HIT in another core and not forwarded per txn</throughput-metric-name>
		<event alias="a">OFFCORE_RESPONSE:request=ANY_REQUEST:response=L2_MISS.HIT_OTHER_CORE_NO_FWD</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_L2 Any code misses that HIT in another core and not forwarded(per instr)">
        <throughput-metric-name>metric_L2 any code misses that HIT in another core and not forwarded per txn</throughput-metric-name>
		<event alias="a">OFFCORE_RESPONSE:request=ANY_CODE_RD:response=L2_MISS.HIT_OTHER_CORE_NO_FWD</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>(a)/b</formula>
	</metric>

	<metric name="metric_L2 demand RFO misses that HIT in another core and not forwarded(per instr)">
        <throughput-metric-name>metric_L2 demand RFO misses that HIT in another core and not forwarded per txn</throughput-metric-name>
		<event alias="a">OFFCORE_RESPONSE:request=DEMAND_RFO:response=L2_MISS.HIT_OTHER_CORE_NO_FWD</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>
	<metric name="metric_% of code misses that HIT in another core and not forwarded(per instr)">
		<event alias="a">OFFCORE_RESPONSE:request=ANY_CODE_RD:response=L2_MISS.HIT_OTHER_CORE_NO_FWD</event>
		<event alias="b">OFFCORE_RESPONSE:request=ANY_CODE_RD:response=L2_MISS.SNOOP_MISS</event>
		<formula>100*a/(a+b)</formula>
	</metric>
-->

	<metric name="metric_% of demand RFO misses that HIT in another core and not forwarded">
		<event alias="a">OFFCORE_RESPONSE:request=DEMAND_RFO:response=L2_MISS.HIT_OTHER_CORE_NO_FWD</event>
		<event alias="b">OFFCORE_RESPONSE:request=DEMAND_RFO:response=L2_MISS.ANY</event>
		<formula>100*a/(a+b)</formula>
	</metric>

    <metric name="metric_core writebacks to memory per instr">
        <throughput-metric-name>metric_core writebacks to memory per txn</throughput-metric-name>
        <event alias="a">OFFCORE_RESPONSE:request=COREWB:response=L2_MISS.SNOOP_MISS_OR_NO_SNOOP_NEEDED</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
    </metric>

	<metric name="metric_DTLB load MPI">
        <throughput-metric-name>metric_DTLB load misses per txn</throughput-metric-name>
		<event alias="a">MEM_UOPS_RETIRED.DTLB_MISS_LOADS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_DTLB store MPI">
        <throughput-metric-name>metric_DTLB load misses per txn</throughput-metric-name>
		<event alias="a">MEM_UOPS_RETIRED.DTLB_MISS_STORES</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

		<metric name="metric_DTLB miss latency (in core clks)">
		<event alias="a">PAGE_WALKS.D_SIDE_CYCLES</event>
		<event alias="b">MEM_UOPS_RETIRED.DTLB_MISS_LOADS</event>
		<event alias="c">MEM_UOPS_RETIRED.DTLB_MISS_STORES</event>
		<formula>a/(b+c)</formula>
	</metric>

	<metric name="metric_ITLB miss latency (in core clks)">
		<event alias="a">PAGE_WALKS.I_SIDE_CYCLES</event>
		<event alias="b">ITLB.MISS</event>
		<formula>a/b</formula>
	</metric>

<!-- 	
    <metric name="metric_memory bandwidth read (CPU traffic only) (MB/sec)">
        <event alias="a">LONGEST_LAT_CACHE.MISS</event>
        <formula>a*64/1000000</formula>
    </metric>

    <metric name="metric_memory bandwidth write (CPU traffic only) (MB/sec)">
        <event alias="a">OFFCORE_RESPONSE:request=COREWB:response=L2_MISS.NO_SNOOP_NEEDED</event>
        <formula>(a/2)*64/1000000</formula>
    </metric>

    <metric name="metric_memory bandwidth total (CPU traffic only) (MB/sec)">
        <event alias="a">LONGEST_LAT_CACHE.MISS</event>
        <event alias="b">OFFCORE_RESPONSE:request=COREWB:response=L2_MISS.NO_SNOOP_NEEDED</event>
        <formula>(a+(b/2))*64/1000000</formula>
    </metric>
-->
    <metric name="metric_memory bandwidth read (MB/sec)">
        <event alias="a">UNC_SOC_DDR_BW.DDR_Chan0_Read64B</event>
        <event alias="b">UNC_SOC_DDR_BW.DDR_Chan1_Read64B</event>
        <formula>(a+b)*64/1000000</formula>
    </metric>

    <metric name="metric_memory bandwidth write (MB/sec)">
        <event alias="a">UNC_SOC_DDR_BW.DDR_Chan0_Write64B</event>
        <event alias="b">UNC_SOC_DDR_BW.DDR_Chan1_Write64B</event>
        <formula>(a+b)*64/1000000</formula>
    </metric>

    <metric name="metric_memory bandwidth total (MB/sec)">
        <event alias="a">UNC_SOC_DDR_BW.DDR_Chan0_Read64B</event>
        <event alias="b">UNC_SOC_DDR_BW.DDR_Chan1_Read64B</event>
        <event alias="c">UNC_SOC_DDR_BW.DDR_Chan0_Write64B</event>
        <event alias="d">UNC_SOC_DDR_BW.DDR_Chan1_Write64B</event>
        <formula>(a+b+c+d)*64/1000000</formula>
    </metric>

	<metric name="metric_IO bandwidth write (MB/sec)">
        <event alias="a">UNC_SOC_IO_BW.IO_Write64B</event>
        <formula>(a*64)/1000000</formula>
    </metric>

	<metric name="metric_IO bandwidth read (MB/sec)">
        <event alias="a">UNC_SOC_IO_BW.IO_Read64B</event>
        <formula>(a*64)/1000000</formula>
    </metric>

	<metric name="metric_IO bandwidth partial (MB/sec)">
        <event alias="a">UNC_SOC_IO_BW.IO_Partial</event>
        <formula>(a*64)/1000000</formula>
    </metric>

	<metric name="metric_IO bandwidth total (MB/sec)">
        <event alias="a">UNC_SOC_IO_BW.IO_Write64B</event>
        <event alias="b">UNC_SOC_IO_BW.IO_Read64B</event>
        <event alias="c">UNC_SOC_IO_BW.IO_Partial</event>
        <formula>(a+b+c)*64/1000000</formula>
    </metric>

<!--
    <metric name="metric_SOC memory bandwidth 32 byte reads (CPU+IO) (MB/sec)">
        <event alias="a">UNC_SOC_DDR_BW.DDR_Chan0_Read32B</event>
        <event alias="b">UNC_SOC_DDR_BW.DDR_Chan1_Read32B</event>
        <formula>(a+b)*32/1000000</formula>
    </metric>

    <metric name="metric_SOC memory bandwidth 32 byte writes (CPU+IO) (MB/sec)">
        <event alias="a">UNC_SOC_DDR_BW.DDR_Chan0_Write32B</event>
        <event alias="b">UNC_SOC_DDR_BW.DDR_Chan1_Write32B</event>
        <formula>(a+b)*32/1000000</formula>
    </metric>

    <metric name="metric_SOC memory bandwidth 32 byte total (CPU+IO) (MB/sec)">
        <event alias="a">UNC_SOC_DDR_BW.DDR_Chan0_Read32B</event>
        <event alias="b">UNC_SOC_DDR_BW.DDR_Chan1_Read32B</event>
        <event alias="c">UNC_SOC_DDR_BW.DDR_Chan0_Write32B</event>
        <event alias="d">UNC_SOC_DDR_BW.DDR_Chan1_Write32B</event>
        <formula>(a+b+c+d)*32/1000000</formula>
    </metric>
-->
	<metric name="metric_machine clears per instr">
        <throughput-metric-name>metric_machine clears per txn</throughput-metric-name>
		<event alias="a">MACHINE_CLEARS.ALL</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

    <metric name="metric_% cycles spent in DTLB page walks">
        <event alias="a">PAGE_WALKS.D_SIDE_CYCLES</event>
        <event alias="b">CPU_CLK_UNHALTED.CORE</event>
        <formula>100*(a/b)</formula>
    </metric>

    <metric name="metric_% cycles spent in ITLB page walks">
        <event alias="a">PAGE_WALKS.I_SIDE_CYCLES</event>
        <event alias="b">CPU_CLK_UNHALTED.CORE</event>
        <formula>100*(a/b)</formula>
    </metric>

        <metric name="metric_Topdown Frontend bound (%)">
        <event alias="a">UOPS_NOT_DELIVERED.ANY</event>
        <event alias="b">CPU_CLK_UNHALTED.CORE</event>
		<constant alias="c">3</constant>      
        <formula>100*a/(3*b)</formula>
    </metric>

    <metric name="metric_Topdown Retiring (%)">
        <event alias="a">UOPS_RETIRED.ANY</event>
        <event alias="b">CPU_CLK_UNHALTED.CORE</event>
        <formula>100*a/(3*b)</formula>
    </metric>

    <metric name="metric_Topdown Bad speculation (%)">
        <event alias="a">UOPS_ISSUED.ANY</event>
        <event alias="b">UOPS_RETIRED.ANY</event>
        <event alias="c">ISSUE_SLOTS_NOT_CONSUMED.RECOVERY</event>
        <event alias="d">CPU_CLK_UNHALTED.CORE</event>
        <formula>100*(a-b+c)/(3*d)</formula>
    </metric>

    <metric name="metric_Topdown Backend bound (%)">
        <event alias="a">ISSUE_SLOTS_NOT_CONSUMED.RESOURCE_FULL</event>
        <event alias="b">CPU_CLK_UNHALTED.CORE</event>
        <formula>100*a/(3*b)</formula>
    </metric>

     <metric name="metric_% cycles spent in divider busy">
        <event alias="a">CYCLES_DIV_BUSY.ALL</event>
        <event alias="b">CPU_CLK_UNHALTED.CORE</event>
        <formula>100*(a/b)</formula>
    </metric>

</root>