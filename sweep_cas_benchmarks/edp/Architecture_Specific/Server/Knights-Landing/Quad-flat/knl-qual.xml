<?xml version="1.0"?>
<root>
	<metric name="metric_CPU operating frequency (in GHz)">
        <event alias="a">CPU_CLK_UNHALTED.THREAD</event>
		<event alias="b">CPU_CLK_UNHALTED.REF_TSC</event>
		<constant alias="c">system.tsc_freq</constant>      
		<formula>(a/b*c)/1000000000</formula>
	</metric>

	<metric name="metric_CPU utilization %">
		<event alias="a">CPU_CLK_UNHALTED.THREAD</event>
		<event alias="b">TSC</event>
		<formula>100*a/b</formula>
	</metric>

    <metric name="metric_CPI">
        <throughput-metric-name>metric_cycles per txn</throughput-metric-name>
        <event alias="a">CPU_CLK_UNHALTED.THREAD</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_% cycles uops retired">
        <event alias="a">UOPS_RETIRED.ALL</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*a/b</formula>
    </metric>
	
	<metric name="metric_branch mispredict ratio">
		<event alias="a">BR_MISP_RETIRED.ALL_BRANCHES</event>
		<event alias="b">BR_INST_RETIRED.ALL_BRANCHES</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_loads retired per instr">
        <throughput-metric-name>metric_loads retired per txn</throughput-metric-name>
		<event alias="a">MEM_UOPS_RETIRED.ALL_LOADS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_stores retired per instr">
        <throughput-metric-name>metric_stores retired per txn</throughput-metric-name>
		<event alias="a">MEM_UOPS_RETIRED.ALL_STORES</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>	

	<metric name="metric_loads splits per instr">
        <throughput-metric-name>metric_loads split per txn</throughput-metric-name>
		<event alias="a">RECYCLEQ.LD_SPLITS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>	

	<metric name="metric_stores splits per instr">
        <throughput-metric-name>metric_stores splits per txn</throughput-metric-name>
		<event alias="a">RECYCLEQ.ST_SPLITS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>	

	<metric name="metric_loads blocked due to store forwards per instr">
        <throughput-metric-name>metric_loads blocked due to store forwards per txn</throughput-metric-name>
		<event alias="a">RECYCLEQ.LD_BLOCK_ST_FORWARD</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>	

	<metric name="metric_loads blocked due to store data not ready per instr">
        <throughput-metric-name>metric_loads blocked due to store data not ready per txn</throughput-metric-name>
		<event alias="a">RECYCLEQ.LD_BLOCK_STD_NOTREADY</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>	

	<metric name="metric_locks retired per instr">
        <throughput-metric-name>metric_locks retired per txn</throughput-metric-name>
		<event alias="a">RECYCLEQ.LOCK</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>	

	<metric name="metric_L1D demand data read MPI">
        <throughput-metric-name>metric_L1D demand data read misses per txn</throughput-metric-name>
		<event alias="a">MEM_UOPS_RETIRED.L1_MISS_LOADS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_L1I code read misses (w/ prefetches) per instr">
        <throughput-metric-name>metric_L1I code read misses (includes prefetches) per txn</throughput-metric-name>
		<event alias="a">ICACHE.MISSES</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_L2 MPI (includes code+data+rfo w/ prefetches)">
        <throughput-metric-name>metric_L2 misses per txn (includes code+data+rfo w/ prefetches)</throughput-metric-name>
		<event alias="a">L2_REQUESTS.MISS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>
 
<!-- 	<metric name="metric_L2 code MPI (includes prefetches)">
        <throughput-metric-name>metric_L2 code misses per txn (includes prefetches)</throughput-metric-name>
		<event alias="a">OFFCORE_RESPONSE:request=ANY_CODE_RD:response=L2_MISS.HIT_OTHER_CORE_NO_FWD</event>
		<event alias="b">OFFCORE_RESPONSE:request=ANY_CODE_RD:response=L2_MISS.SNOOP_MISS</event>
		<event alias="c">INST_RETIRED.ANY</event>
    	<formula>(a+b)/(c*2)</formula>
	</metric>  -->
	
	<metric name="metric_L2 demand data read hits per instr">
        <throughput-metric-name>metric_L2 demand data read hits per txn</throughput-metric-name>
		<event alias="a">MEM_UOPS_RETIRED.L2_HIT_LOADS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

 	<metric name="metric_L2 demand data read MPI">
        <throughput-metric-name>metric_L2 demand data read misses per txn</throughput-metric-name>
		<event alias="a">MEM_UOPS_RETIRED.L2_MISS_LOADS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

  	<metric name="metric_L2 read miss latency (in core clocks)">
		<event alias="a">OFFCORE_RESPONSE:request=ANY_REQUEST:response=OUTSTANDING</event>
		<event alias="b">OFFCORE_RESPONSE:request=ANY_REQUEST:response=L2_MISS</event>
		<formula>a/b+17</formula>
	</metric> 
	
	<metric name="metric_L2 Any request that HITM in another core (per instr)">
        <throughput-metric-name>metric_L2 Any request that HITM in another core per txn</throughput-metric-name>
		<event alias="a">OFFCORE_RESPONSE:request=ANY_REQUEST:response=L2_HIT_NEAR_TILE_M</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<constant alias="threads_per_tile">system.sockets[0][0].size * 2</constant>
    	<formula>((a)/threads_per_tile)/b</formula>  
	</metric> 

	<metric name="metric_L2 Any request that HIT in another core (per instr)"> <!-- Why DEMAND_RFO -->
        <throughput-metric-name>metric_L2 Any request that HIT in another core per txn</throughput-metric-name>
		<event alias="a">OFFCORE_RESPONSE:request=DEMAND_RFO:response=L2_HIT_NEAR_TILE_E_F</event>
		<event alias="b">OFFCORE_RESPONSE:request=DEMAND_RFO:response=L2_HIT_NEAR_TILE_M</event>
		<constant alias="threads_per_tile">system.sockets[0][0].size * 2</constant>
		<event alias="c">INST_RETIRED.ANY</event>
    	<formula>((a+b)/threads_per_tile)/c</formula>  
	</metric> 
	
	<!-- <metric name="metric_L2 Any code misses that HIT in another core and not forwarded(per instr)">
        <throughput-metric-name>metric_L2 any code misses that HIT in another core and not forwarded per txn</throughput-metric-name>
		<event alias="a">OFFCORE_RESPONSE:request=ANY_CODE_RD:response=L2_MISS.HIT_OTHER_CORE_NO_FWD</event>
		<event alias="b">INST_RETIRED.ANY</event>
    	<formula>(a/2)/b</formula>
	</metric> -->

	<metric name="metric_L2 demand RFO misses that HIT in another core and not forwarded(per instr)"> 
        <throughput-metric-name>metric_L2 demand RFO misses that HIT in another core and not forwarded per txn</throughput-metric-name>
		<event alias="a">OFFCORE_RESPONSE:request=DEMAND_RFO:response=L2_HIT_NEAR_TILE_E_F</event>
		<constant alias="threads_per_tile">system.sockets[0][0].size * 2</constant>
		<event alias="b">INST_RETIRED.ANY</event>
    	<formula>((a)/threads_per_tile)/b</formula>
	</metric> 

	<!-- <metric name="metric_% of code misses that HIT in another core and not forwarded(per instr)">
		<event alias="a">OFFCORE_RESPONSE:request=ANY_CODE_RD:response=L2_MISS.HIT_OTHER_CORE_NO_FWD</event>
		<event alias="b">OFFCORE_RESPONSE:request=ANY_CODE_RD:response=L2_MISS.SNOOP_MISS</event>
		<formula>100*a/(a+b)</formula>
	</metric> -->

	<metric name="metric_% of demand RFO misses that HIT in another core">
		<event alias="a">OFFCORE_RESPONSE:request=DEMAND_RFO:response=L2_HIT_NEAR_TILE_E_F</event>
		<event alias="b">OFFCORE_RESPONSE:request=DEMAND_RFO:response=L2_HIT_NEAR_TILE_M</event>
		<event alias="c">OFFCORE_RESPONSE:request=DEMAND_RFO:response=ANY_RESPONSE</event>
		<formula>100*(a+b)/(c)</formula>
	</metric>
	
	<metric name="metric_% of demand data reads that HIT in another tile Cache">
		<event alias="a">OFFCORE_RESPONSE:request=DEMAND_DATA_RD:response=L2_HIT_NEAR_TILE_E_F</event>
		<event alias="b">OFFCORE_RESPONSE:request=DEMAND_DATA_RD:response=L2_HIT_NEAR_TILE_M</event>
		<event alias="c">OFFCORE_RESPONSE:request=DEMAND_DATA_RD:response=DDR</event>
		<event alias="d">OFFCORE_RESPONSE:request=DEMAND_DATA_RD:response=MCDRAM</event>
		<formula>100*(a+b)/(a+b+c+d)</formula>
	</metric>

	<metric name="metric_% of demand data reads satisfied by DDR">
		<event alias="a">OFFCORE_RESPONSE:request=DEMAND_DATA_RD:response=L2_HIT_NEAR_TILE_E_F</event>
		<event alias="b">OFFCORE_RESPONSE:request=DEMAND_DATA_RD:response=L2_HIT_NEAR_TILE_M</event>
		<event alias="c">OFFCORE_RESPONSE:request=DEMAND_DATA_RD:response=DDR</event>
		<event alias="d">OFFCORE_RESPONSE:request=DEMAND_DATA_RD:response=MCDRAM</event>
		<formula>100*(c)/(a+b+c+d)</formula>
	</metric>	

		<metric name="metric_% of demand data reads satisfied by MCDRAM">
		<event alias="a">OFFCORE_RESPONSE:request=DEMAND_DATA_RD:response=L2_HIT_NEAR_TILE_E_F</event>
		<event alias="b">OFFCORE_RESPONSE:request=DEMAND_DATA_RD:response=L2_HIT_NEAR_TILE_M</event>
		<event alias="c">OFFCORE_RESPONSE:request=DEMAND_DATA_RD:response=DDR</event>
		<event alias="d">OFFCORE_RESPONSE:request=DEMAND_DATA_RD:response=MCDRAM</event>
		<formula>100*(d)/(a+b+c+d)</formula>
	</metric>
    <!-- <metric name="metric_core writebacks to memory per instr">
        <throughput-metric-name>metric_core writebacks to memory per txn</throughput-metric-name>
        <event alias="a">OFFCORE_RESPONSE:request=COREWB:response=L2_MISS.NO_SNOOP_NEEDED</event>
		<event alias="b">INST_RETIRED.ANY</event>
    	<formula>(a/2)/b</formula>
    </metric> -->

	<metric name="metric_DTLB 1st level UTLB load MPI">
        <throughput-metric-name>metric_DTLB 1st level UTLB load misses per txn</throughput-metric-name>
		<event alias="a">MEM_UOPS_RETIRED.UTLB_MISS.LOAD</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_DTLB 2nd level DTLB (load+store) MPI">
        <throughput-metric-name>metric_DTLB 2nd level DTLB (load+store) misses per txn</throughput-metric-name>
		<event alias="a">PAGE_WALKS.D_SIDE_WALKS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_page_walks DTLB (load+store) per instr">
        <throughput-metric-name>metric_page_walks DTLB (load+store) per txn</throughput-metric-name>
		<event alias="a">PAGE_WALKS.D_SIDE_WALKS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_page_walks ITLB per instr">
        <throughput-metric-name>metric_page_walks ITLB per txn</throughput-metric-name>
		<event alias="a">PAGE_WALKS.I_SIDE_WALKS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_DTLB miss latency (in core clks)">
		<event alias="a">PAGE_WALKS.D_SIDE_CYCLES</event>
		<event alias="b">PAGE_WALKS.D_SIDE_WALKS</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_ITLB miss latency (in core clks)">
		<event alias="a">PAGE_WALKS.I_SIDE_CYCLES</event>
		<event alias="b">PAGE_WALKS.I_SIDE_WALKS</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_total TLB (ITLB+DTLB) miss latency (in core clks)">
		<event alias="a">PAGE_WALKS.D_SIDE_CYCLES</event>
		<event alias="b">PAGE_WALKS.I_SIDE_CYCLES</event>
		<event alias="c">PAGE_WALKS.D_SIDE_WALKS</event>
		<event alias="d">PAGE_WALKS.I_SIDE_WALKS</event>
		<formula>(a+b)/(c+d)</formula>
	</metric>

    <metric name="metric_ddr bandwidth read (CPU traffic only) (MB/sec)">
        <event alias="a">UNC_M_CAS_COUNT.RD</event>
        <formula>a*64/1000000</formula>
    </metric>

    <metric name="metric_ddr bandwidth write (CPU traffic only) (MB/sec)">
        <event alias="a">UNC_M_CAS_COUNT.WR</event>
        <formula>a*64/1000000</formula>
    </metric>

    <metric name="metric_ddr bandwidth total (CPU traffic only) (MB/sec)">
        <event alias="a">UNC_M_CAS_COUNT.RD</event>
        <event alias="b">UNC_M_CAS_COUNT.WR</event>
        <formula>(a+b)*64/1000000</formula>
    </metric>
	
	  <metric name="metric_mcdram bandwidth read (CPU traffic only) (MB/sec)">
        <event alias="a">UNC_E_RPQ_INSERTS</event>
        <formula>a*64/1000000</formula>
    </metric>

    <metric name="metric_mcdram bandwidth write (CPU traffic only) (MB/sec)">
        <event alias="a">UNC_E_WPQ_INSERTS</event>
        <formula>a*64/1000000</formula>
    </metric>

    <metric name="metric_mcdram bandwidth total (CPU traffic only) (MB/sec)">
        <event alias="a">UNC_E_RPQ_INSERTS</event>
        <event alias="b">UNC_E_WPQ_INSERTS</event>
        <formula>(a+b)*64/1000000</formula>
    </metric>

  <!--   <metric name="metric_sochaps memory bandwidth read (CPU+IO) (MB/sec)">
        <event alias="a">UNC_VISA_Memory_DDR_BW.DDR_Chan0_Rank0-Read_Cmd</event>
        <event alias="b">UNC_VISA_Memory_DDR_BW.DDR_Chan0_Rank1-Read_Cmd</event>
        <event alias="c">UNC_VISA_Memory_DDR_BW.DDR_Chan1_Rank0-Read_Cmd</event>
        <event alias="d">UNC_VISA_Memory_DDR_BW.DDR_Chan1_Rank1-Read_Cmd</event>
        <formula>(a+b+c+d)*64/1000000</formula>
    </metric>

    <metric name="metric_sochaps memory bandwidth write (CPU+IO) (MB/sec)">
        <event alias="a">UNC_VISA_Memory_DDR_BW.DDR_Chan0_Rank0-Write_Cmd</event>
        <event alias="b">UNC_VISA_Memory_DDR_BW.DDR_Chan0_Rank1-Write_Cmd</event>
        <event alias="c">UNC_VISA_Memory_DDR_BW.DDR_Chan1_Rank0-Write_Cmd</event>
        <event alias="d">UNC_VISA_Memory_DDR_BW.DDR_Chan1_Rank1-Write_Cmd</event>
        <formula>(a+b+c+d)*64/1000000</formula>
    </metric>

    <metric name="metric_sochaps memory bandwidth total (CPU+IO) (MB/sec)">
        <event alias="a">UNC_VISA_Memory_DDR_BW.DDR_Chan0_Rank0-Read_Cmd</event>
        <event alias="b">UNC_VISA_Memory_DDR_BW.DDR_Chan0_Rank1-Read_Cmd</event>
        <event alias="c">UNC_VISA_Memory_DDR_BW.DDR_Chan1_Rank0-Read_Cmd</event>
        <event alias="d">UNC_VISA_Memory_DDR_BW.DDR_Chan1_Rank1-Read_Cmd</event>
        <event alias="e">UNC_VISA_Memory_DDR_BW.DDR_Chan0_Rank0-Write_Cmd</event>
        <event alias="f">UNC_VISA_Memory_DDR_BW.DDR_Chan0_Rank1-Write_Cmd</event>
        <event alias="g">UNC_VISA_Memory_DDR_BW.DDR_Chan1_Rank0-Write_Cmd</event>
        <event alias="h">UNC_VISA_Memory_DDR_BW.DDR_Chan1_Rank1-Write_Cmd</event>
        <formula>(a+b+c+d+e+f+g+h)*64/1000000</formula>
    </metric>
 -->

	<metric name="metric_machine clears per instr">
        <throughput-metric-name>metric_machine clears per txn</throughput-metric-name>
		<event alias="a">MACHINE_CLEARS.ALL</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

    <metric name="metric_% cycles spent in DTLB page walks">
        <event alias="a">PAGE_WALKS.D_SIDE_CYCLES</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*(a/b)</formula>
    </metric>

    <metric name="metric_% cycles spent in ITLB page walks">
        <event alias="a">PAGE_WALKS.I_SIDE_CYCLES</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*(a/b)</formula>
    </metric>

        <metric name="metric_% cycles front-end bounded">
        <event alias="a">NO_ALLOC_CYCLES.NOT_DELIVERED</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*(a/b)</formula>
    </metric>

    <metric name="metric_% cycles RS is full">
        <event alias="a">RS_FULL_STALL.ALL</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*(a/b)</formula>
    </metric>

    <metric name="metric_% cycles spent in divider busy">
        <event alias="a">CYCLES_DIV_BUSY.ALL</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*(a/b)</formula>
    </metric>

	<metric name="metric_packed simd uops executed per instr">
        <event alias="a">UOPS_RETIRED.PACKED_SIMD</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>100*(a/b)</formula>
    </metric>

	<metric name="metric_scalar simd uops executed per instr">
        <event alias="a">UOPS_RETIRED.SCALAR_SIMD</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>100*(a/b)</formula>
    </metric>

</root>