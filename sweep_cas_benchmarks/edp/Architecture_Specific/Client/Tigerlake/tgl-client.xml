<?xml version="1.0"?>
<root>

    <metric name="metric_CPU operating frequency (in GHz)">
        <event alias="a">CPU_CLK_UNHALTED.THREAD</event>
        <event alias="b">CPU_CLK_UNHALTED.REF_TSC</event>
        <constant alias="c">system.tsc_freq</constant>
        <formula>(a/b*c)/1000000000</formula>
    </metric>

    <metric name="metric_CPU utilization %">
        <event alias="a">CPU_CLK_UNHALTED.REF_TSC</event>
        <event alias="b">TSC</event>
        <formula>100*a/b</formula>
    </metric>

    <metric name="metric_CPU utilization% in kernel mode">
        <event alias="a">CPU_CLK_UNHALTED.REF_TSC:SUP</event>
        <event alias="b">TSC</event>
        <formula>100*a/b</formula>
    </metric>

    <metric name="metric_CPI">
        <throughput-metric-name>metric_cycles per txn</throughput-metric-name>
        <event alias="a">CPU_CLK_UNHALTED.THREAD</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_kernel_CPI">
        <event alias="a">CPU_CLK_UNHALTED.THREAD:SUP</event>
        <event alias="b">INST_RETIRED.ANY:SUP</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_EMON event mux reliability% (>95% good)">
        <event alias="a">CPU_CLK_UNHALTED.THREAD_P</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*(((a-b)&lt;0)?(a/b):(b/a))</formula>
    </metric>

    <metric name="metric_EDP EMON Sampling time (seconds)">
        <constant alias="time">$samplingTime</constant>
        <formula>time</formula>
    </metric>

    <metric name="metric_EDP EMON total number of samples">
        <constant alias="samples">$processed_samples</constant>
        <formula>samples</formula>
    </metric>

    <metric name="metric_branch mispredict ratio">
        <event alias="a">BR_MISP_RETIRED.ALL_BRANCHES</event>
        <event alias="b">BR_INST_RETIRED.ALL_BRANCHES</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_branch mispredict to unknown branch ratio">
        <event alias="a">BR_MISP_RETIRED.ALL_BRANCHES</event>
        <event alias="b">BACLEARS.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_loads per instr">
        <throughput-metric-name>metric_loads per txn</throughput-metric-name>
        <event alias="a">MEM_INST_RETIRED.ALL_LOADS</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_stores per instr">
        <throughput-metric-name>metric_stores per txn</throughput-metric-name>
        <event alias="a">MEM_INST_RETIRED.ALL_STORES</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_locks retired per instr">
        <throughput-metric-name>metric_locks retired per txn</throughput-metric-name>
        <event alias="a">MEM_INST_RETIRED.LOCK_LOADS</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_streaming stores per instr">
        <throughput-metric-name>metric_streaming stores (full line) per txn</throughput-metric-name>
        <event alias="a">OCR.STREAMING_WR.ANY_RESPONSE</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_L1D MPI (includes data+rfo w/ prefetches)">
        <throughput-metric-name>metric_L1D misses per txn (includes data+rfo w/ prefetches)</throughput-metric-name>
        <event alias="a">L1D.REPLACEMENT</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_L1D demand data read hits per instr">
        <throughput-metric-name>metric_L1D demand data read hits per txn</throughput-metric-name>
        <event alias="a">MEM_LOAD_RETIRED.L1_HIT</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_L1-I code read misses (w/ prefetches) per instr">
        <throughput-metric-name>metric_L1I code read misses (includes prefetches) per txn</throughput-metric-name>
        <event alias="a">L2_RQSTS.ALL_CODE_RD</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_L2 demand data read hits per instr">
        <throughput-metric-name>metric_L2 demand data read hits per txn</throughput-metric-name>
        <event alias="a">MEM_LOAD_RETIRED.L2_HIT</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_L2 MPI (includes code+data+rfo w/ prefetches)">
        <throughput-metric-name>metric_L2 misses per txn (includes code+data+rfo w/ prefetches)</throughput-metric-name>
        <event alias="a">L2_LINES_IN.ALL</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_L2 demand data read MPI">
        <throughput-metric-name>metric_L2 demand data read misses per txn</throughput-metric-name>
        <event alias="a">MEM_LOAD_RETIRED.L2_MISS</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_L2 demand code MPI">
        <throughput-metric-name>metric_L2 demand code misses per txn</throughput-metric-name>
        <event alias="a">L2_RQSTS.CODE_RD_MISS</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_L2 Any local request that HITM in a sibling core (per instr)">
        <throughput-metric-name>metric_L2 Any local request that HITM in a sibling core per txn</throughput-metric-name>
        <event alias="a">OCR.ALL_REQUESTS.L3_HIT.SNOOP_HITM</event>
        <event alias="c">INST_RETIRED.ANY</event>
        <formula>a/c</formula>
    </metric>

    <metric name="metric_L2 Any local request that HIT in a sibling core and forwarded(per instr)">
        <throughput-metric-name>metric_L2 Any local request that HIT in a sibling core and forwarded per txn</throughput-metric-name>
        <event alias="a">OCR.ALL_REQUESTS.L3_HIT.SNOOP_HIT_WITH_FWD</event>
        <event alias="c">INST_RETIRED.ANY</event>
        <formula>a/c</formula>
    </metric>

    <metric name="metric_L2 all L2 prefetches(per instr)">
        <throughput-metric-name>metric_L2 all L2 prefetches per txn</throughput-metric-name>
        <event alias="a">L2_RQSTS.ALL_HWPF</event>
        <event alias="c">INST_RETIRED.ANY</event>
        <formula>a/c</formula>
    </metric>

    <metric name="metric_L2 % of all lines evicted that are unused prefetches">
        <event alias="a">L2_LINES_OUT.USELESS_HWPF</event>
        <event alias="b">L2_LINES_OUT.NON_SILENT</event>
        <event alias="c">L2_LINES_OUT.SILENT</event>
        <constant alias="threads">system.sockets[0][0].size</constant>
        <formula>100*a/(b+(c/threads))</formula>
    </metric>

    <metric name="metric_L2 % of L2 evictions that are allocated into L3">
        <event alias="a">L2_LINES_OUT.NON_SILENT</event>
        <event alias="b">IDI_MISC.WB_DOWNGRADE</event>
        <formula>100*(a-b)/a</formula>
    </metric>

    <metric name="metric_L2 % of L2 evictions that are NOT allocated into L3">
        <event alias="a">L2_LINES_OUT.NON_SILENT</event>
        <event alias="b">IDI_MISC.WB_DOWNGRADE</event>
        <formula>100*b/a</formula>
    </metric>

    <metric name="metric_LLC MPI (includes code+data+rfo w/ prefetches)">
        <throughput-metric-name>metric_LLC misses per txn (includes code+data+rfo w/ prefetches)</throughput-metric-name>
        <event alias="a">UNC_CBO_CACHE_LOOKUP.ANY_I</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_LLC writebacks per instr">
        <throughput-metric-name>metric_LLC writebacks per txn</throughput-metric-name>
        <event alias="a">UNC_CBO_LINES_VICTIMIZED.M</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_ITLB MPI">
        <throughput-metric-name>metric_ITLB misses per txn</throughput-metric-name>
        <event alias="a">ITLB_MISSES.WALK_COMPLETED</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_ITLB large page MPI">
        <throughput-metric-name>metric_ITLB large page misses per txn</throughput-metric-name>
        <event alias="a">ITLB_MISSES.WALK_COMPLETED_2M_4M</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_STLB data page hits per instr">
        <throughput-metric-name>metric_STLB data page hits per txn</throughput-metric-name>
        <event alias="a">DTLB_LOAD_MISSES.STLB_HIT</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_DTLB load MPI">
        <throughput-metric-name>metric_DTLB load misses per txn</throughput-metric-name>
        <event alias="a">DTLB_LOAD_MISSES.WALK_COMPLETED</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_DTLB 4KB page load MPI">
        <throughput-metric-name>metric_DTLB 4KB page load misses per txn</throughput-metric-name>
        <event alias="a">DTLB_LOAD_MISSES.WALK_COMPLETED</event>
        <event alias="b">DTLB_LOAD_MISSES.WALK_COMPLETED_2M_4M</event>
        <event alias="c">DTLB_LOAD_MISSES.WALK_COMPLETED_1G</event>
        <event alias="d">INST_RETIRED.ANY</event>
        <formula>(a-b-c)/d</formula>
    </metric>

    <metric name="metric_DTLB 2MB large page load MPI">
        <throughput-metric-name>metric_DTLB 2MB large page load misses per txn</throughput-metric-name>
        <event alias="a">DTLB_LOAD_MISSES.WALK_COMPLETED_2M_4M</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_DTLB 1GB large page load MPI">
        <throughput-metric-name>metric_DTLB 1GB large page load misses per txn</throughput-metric-name>
        <event alias="a">DTLB_LOAD_MISSES.WALK_COMPLETED_1G</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_DTLB store MPI">
        <throughput-metric-name>metric_DTLB store misses per txn</throughput-metric-name>
        <event alias="a">DTLB_STORE_MISSES.WALK_COMPLETED</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_DTLB load miss latency (in core clks)">
        <event alias="a">DTLB_LOAD_MISSES.WALK_ACTIVE</event>
        <event alias="b">DTLB_LOAD_MISSES.WALK_COMPLETED</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_DTLB store miss latency (in core clks)">
        <event alias="a">DTLB_STORE_MISSES.WALK_ACTIVE</event>
        <event alias="b">DTLB_STORE_MISSES.WALK_COMPLETED</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_ITLB miss latency (in core clks)">
        <event alias="a">ITLB_MISSES.WALK_ACTIVE</event>
        <event alias="b">ITLB_MISSES.WALK_COMPLETED</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_memory bandwidth read (MB/sec)">
        <event alias="a">UNC_MC0_RDCAS_COUNT_FREERUN</event>
		<event alias="b">UNC_MC1_RDCAS_COUNT_FREERUN</event>
        <formula>(a+b)*64/1000000</formula>
    </metric>

    <metric name="metric_memory bandwidth write (MB/sec)">
        <event alias="a">UNC_MC0_WRCAS_COUNT_FREERUN</event>
		<event alias="b">UNC_MC1_WRCAS_COUNT_FREERUN</event>
        <formula>(a+b)*64/1000000</formula>
    </metric>

    <metric name="metric_memory bandwidth total (MB/sec)">
        <event alias="a">UNC_MC0_RDCAS_COUNT_FREERUN</event>
		<event alias="b">UNC_MC1_RDCAS_COUNT_FREERUN</event>
        <event alias="c">UNC_MC0_WRCAS_COUNT_FREERUN</event>
		<event alias="d">UNC_MC1_WRCAS_COUNT_FREERUN</event>
        <formula>(a+b+c+d)*64/1000000</formula>
    </metric>

    <metric name="metric_core % cycles in non AVX license">
        <event alias="a">CORE_POWER.LVL0_TURBO_LICENSE</event>
        <event alias="b">CORE_POWER.LVL1_TURBO_LICENSE</event>
        <event alias="c">CORE_POWER.LVL2_TURBO_LICENSE</event>
        <formula>100*a/(a+b+c)</formula>
    </metric>

    <metric name="metric_core % cycles in AVX2 license">
        <event alias="a">CORE_POWER.LVL0_TURBO_LICENSE</event>
        <event alias="b">CORE_POWER.LVL1_TURBO_LICENSE</event>
        <event alias="c">CORE_POWER.LVL2_TURBO_LICENSE</event>
        <formula>100*b/(a+b+c)</formula>
    </metric>

    <metric name="metric_core % cycles in AVX-512 license">
        <event alias="a">CORE_POWER.LVL0_TURBO_LICENSE</event>
        <event alias="b">CORE_POWER.LVL1_TURBO_LICENSE</event>
        <event alias="c">CORE_POWER.LVL2_TURBO_LICENSE</event>
        <formula>100*c/(a+b+c)</formula>
    </metric>
    <metric name="metric_FP scalar single-precision FP instructions retired per instr">
        <throughput-metric-name>metric_FP scalar single-precision FP instructions retired per txn</throughput-metric-name>
        <event alias="a">FP_ARITH_INST_RETIRED.SCALAR_SINGLE</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_FP scalar double-precision FP instructions retired per instr">
        <throughput-metric-name>metric_FP scalar double-precision FP instructions retired per txn</throughput-metric-name>
        <event alias="a">FP_ARITH_INST_RETIRED.SCALAR_DOUBLE</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_FP 128-bit packed single-precision FP instructions retired per instr">
        <throughput-metric-name>metric_FP 128-bit packed single-precision FP instructions retired per txn</throughput-metric-name>
        <event alias="a">FP_ARITH_INST_RETIRED.128B_PACKED_SINGLE</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_FP 128-bit packed double-precision FP instructions retired per instr">
        <throughput-metric-name>metric_FP 128-bit packed double-precision FP instructions retired per txn</throughput-metric-name>
        <event alias="a">FP_ARITH_INST_RETIRED.128B_PACKED_DOUBLE</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_FP 256-bit packed single-precision FP instructions retired per instr">
        <throughput-metric-name>metric_FP 256-bit packed single-precision FP instructions retired per txn</throughput-metric-name>
        <event alias="a">FP_ARITH_INST_RETIRED.256B_PACKED_SINGLE</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_FP 256-bit packed double-precision FP instructions retired per instr">
        <throughput-metric-name>metric_FP 256-bit packed double-precision FP instructions retired per txn</throughput-metric-name>
        <event alias="a">FP_ARITH_INST_RETIRED.256B_PACKED_DOUBLE</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_FP 512-bit packed single-precision FP instructions retired per instr">
        <throughput-metric-name>metric_FP 512-bit packed single-precision FP instructions retired per txn</throughput-metric-name>
        <event alias="a">FP_ARITH_INST_RETIRED.512B_PACKED_SINGLE</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_FP 512-bit packed double-precision FP instructions retired per instr">
        <throughput-metric-name>metric_FP 512-bit packed double-precision FP instructions retired per txn</throughput-metric-name>
        <event alias="a">FP_ARITH_INST_RETIRED.512B_PACKED_DOUBLE</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_core c6 residency %">
        <event alias="a">FREERUN_CORE_C6_RESIDENCY</event>
        <event alias="b">TSC</event>
        <formula>100*a/b</formula>
    </metric>

    <metric name="metric_package c2 residency %">
        <event alias="a">FREERUN_PKG_C2_RESIDENCY</event>
        <event alias="b">TSC</event>
        <constant alias="cpu_count">system.sockets[0].cpus.count</constant>
        <formula>100*a*cpu_count/b</formula>
    </metric>

    <metric name="metric_package c3 residency %">
        <event alias="a">FREERUN_PKG_C3_RESIDENCY</event>
        <event alias="b">TSC</event>
        <constant alias="cpu_count">system.sockets[0].cpus.count</constant>
        <formula>100*a*cpu_count/b</formula>
    </metric>

    <metric name="metric_package c6 residency %">
        <event alias="a">FREERUN_PKG_C6_RESIDENCY</event>
        <event alias="b">TSC</event>
        <constant alias="cpu_count">system.sockets[0].cpus.count</constant>
        <formula>100*a*cpu_count/b</formula>
    </metric>

    <metric name="metric_package power (watts)">
        <event alias="a">MSR_EVENT:msr=0x611:type=FREERUN:scope=PACKAGE</event>
        <formula>a*61/1000000</formula>
    </metric>

    <metric name="metric_DRAM power (watts)">
        <event alias="a">MSR_EVENT:msr=0x619:type=FREERUN:scope=PACKAGE</event>
        <formula>a*61/1000000</formula>
    </metric>

    <metric name="metric_PP0 power (watts)">
        <event alias="a">MSR_EVENT:msr=0x639:type=FREERUN:scope=PACKAGE</event>
        <formula>a*61/1000000</formula>
    </metric>

    <metric name="metric_PP1 power (watts)">
        <event alias="a">MSR_EVENT:msr=0x641:type=FREERUN:scope=PACKAGE</event>
        <formula>a*61/1000000</formula>
    </metric>

    <metric name="metric_TMA_Frontend_Bound(%)">
        <event alias="a">PERF_METRICS.FRONTEND_BOUND</event>
        <event alias="b">PERF_METRICS.BAD_SPECULATION</event>
        <event alias="c">PERF_METRICS.RETIRING</event>
        <event alias="d">PERF_METRICS.BACKEND_BOUND</event>
        <event alias="e">INT_MISC.UOP_DROPPING</event>
        <event alias="f">TOPDOWN.SLOTS:perf_metrics</event>
        <formula>100 * ( a / ( ( a + b + c + d ) ) - e / ( f ) )</formula>
    </metric>

    <metric name="metric_TMA_..Fetch_Latency(%)">
        <event alias="a">IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE</event>
        <event alias="b">TOPDOWN.SLOTS:perf_metrics</event>
        <formula>100 * ( ( 5 ) * a / ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_....ICache_Misses(%)">
        <event alias="a">ICACHE_16B.IFDATA_STALL</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( a / ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_....ITLB_Misses(%)">
        <event alias="a">ICACHE_64B.IFTAG_STALL</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( a / ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_....Branch_Resteers(%)">
        <event alias="a">INT_MISC.CLEAR_RESTEER_CYCLES</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <event alias="c">BACLEARS.ANY</event>
        <formula>100 * ( a / ( b ) + ( ( 10 ) * c / ( b ) ) )</formula>
    </metric>

    <metric name="metric_TMA_......Mispredicts_Resteers(%)">
        <event alias="a">BR_MISP_RETIRED.ALL_BRANCHES</event>
        <event alias="b">MACHINE_CLEARS.COUNT</event>
        <event alias="c">INT_MISC.CLEAR_RESTEER_CYCLES</event>
        <event alias="d">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( ( a / ( a + b ) ) * c / ( d ) )</formula>
    </metric>

    <metric name="metric_TMA_......Clears_Resteers(%)">
        <event alias="a">BR_MISP_RETIRED.ALL_BRANCHES</event>
        <event alias="b">MACHINE_CLEARS.COUNT</event>
        <event alias="c">INT_MISC.CLEAR_RESTEER_CYCLES</event>
        <event alias="d">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( ( 1 - ( a / ( a + b ) ) ) * c / ( d ) )</formula>
    </metric>

    <metric name="metric_TMA_......Unknown_Branches(%)">
        <event alias="a">BACLEARS.ANY</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( ( 10 ) * a / ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_....DSB_Switches(%)">
        <event alias="a">DSB2MITE_SWITCHES.PENALTY_CYCLES</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( a / ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_....LCP(%)">
        <event alias="a">ILD_STALL.LCP</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( a / ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_....MS_Switches(%)">
        <event alias="a">IDQ.MS_SWITCHES</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( ( 3 ) * a / ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_..Fetch_Bandwidth(%)">
        <event alias="a">PERF_METRICS.FRONTEND_BOUND</event>
        <event alias="b">PERF_METRICS.BAD_SPECULATION</event>
        <event alias="c">PERF_METRICS.RETIRING</event>
        <event alias="d">PERF_METRICS.BACKEND_BOUND</event>
        <event alias="e">INT_MISC.UOP_DROPPING</event>
        <event alias="f">TOPDOWN.SLOTS:perf_metrics</event>
        <event alias="g">IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE</event>
        <formula>100 * ( ( ( 0 ) &gt; ( ( a / ( ( a + b + c + d ) ) - e / ( f ) ) - ( ( 5 ) * g / ( f ) ) ) ) ? ( 0 ) : ( ( a / ( ( a + b + c + d ) ) - e / ( f ) ) - ( ( 5 ) * g / ( f ) ) ) )</formula>
    </metric>

    <metric name="metric_TMA_....MITE(%)">
        <event alias="a">IDQ.MITE_CYCLES_ANY</event>
        <event alias="b">IDQ.MITE_CYCLES_OK</event>
        <event alias="c">CPU_CLK_UNHALTED.DISTRIBUTED</event>
        <formula>100 * ( ( a - b ) / ( c ) / 2 )</formula>
    </metric>

    <metric name="metric_TMA_....DSB(%)">
        <event alias="a">IDQ.DSB_CYCLES_ANY</event>
        <event alias="b">IDQ.DSB_CYCLES_OK</event>
        <event alias="c">CPU_CLK_UNHALTED.DISTRIBUTED</event>
        <formula>100 * ( ( a - b ) / ( c ) / 2 )</formula>
    </metric>

    <metric name="metric_TMA_....LSD(%)">
        <event alias="a">LSD.CYCLES_ACTIVE</event>
        <event alias="b">LSD.CYCLES_OK</event>
        <event alias="c">CPU_CLK_UNHALTED.DISTRIBUTED</event>
        <formula>100 * ( ( a - b ) / ( c ) / 2 )</formula>
    </metric>

    <metric name="metric_TMA_Bad_Speculation(%)">
        <event alias="a">PERF_METRICS.FRONTEND_BOUND</event>
        <event alias="b">PERF_METRICS.BAD_SPECULATION</event>
        <event alias="c">PERF_METRICS.RETIRING</event>
        <event alias="d">PERF_METRICS.BACKEND_BOUND</event>
        <event alias="e">INT_MISC.UOP_DROPPING</event>
        <event alias="f">TOPDOWN.SLOTS:perf_metrics</event>
        <event alias="g">INT_MISC.RECOVERY_CYCLES:c1:e1</event>
        <formula>100 * ( ( ( 1 - ( ( a / ( ( a + b + c + d ) ) - e / ( f ) ) + ( d / ( ( a + b + c + d ) ) + ( ( 5 ) * g ) / ( f ) ) + ( c / ( ( a + b + c + d ) ) ) ) ) &gt; ( 0 ) ) ? ( 1 - ( ( a / ( ( a + b + c + d ) ) - e / ( f ) ) + ( d / ( ( a + b + c + d ) ) + ( ( 5 ) * g ) / ( f ) ) + ( c / ( ( a + b + c + d ) ) ) ) ) : ( 0 ) )</formula>
    </metric>

    <metric name="metric_TMA_..Branch_Mispredicts(%)">
        <event alias="a">BR_MISP_RETIRED.ALL_BRANCHES</event>
        <event alias="b">MACHINE_CLEARS.COUNT</event>
        <event alias="c">PERF_METRICS.FRONTEND_BOUND</event>
        <event alias="d">PERF_METRICS.BAD_SPECULATION</event>
        <event alias="e">PERF_METRICS.RETIRING</event>
        <event alias="f">PERF_METRICS.BACKEND_BOUND</event>
        <event alias="g">INT_MISC.UOP_DROPPING</event>
        <event alias="h">TOPDOWN.SLOTS:perf_metrics</event>
        <event alias="i">INT_MISC.RECOVERY_CYCLES:c1:e1</event>
        <formula>100 * ( ( a / ( a + b ) ) * ( ( ( 1 - ( ( c / ( ( c + d + e + f ) ) - g / ( h ) ) + ( f / ( ( c + d + e + f ) ) + ( ( 5 ) * i ) / ( h ) ) + ( e / ( ( c + d + e + f ) ) ) ) ) &gt; ( 0 ) ) ? ( 1 - ( ( c / ( ( c + d + e + f ) ) - g / ( h ) ) + ( f / ( ( c + d + e + f ) ) + ( ( 5 ) * i ) / ( h ) ) + ( e / ( ( c + d + e + f ) ) ) ) ) : ( 0 ) ) )</formula>
    </metric>

    <metric name="metric_TMA_..Machine_Clears(%)">
        <event alias="a">PERF_METRICS.FRONTEND_BOUND</event>
        <event alias="b">PERF_METRICS.BAD_SPECULATION</event>
        <event alias="c">PERF_METRICS.RETIRING</event>
        <event alias="d">PERF_METRICS.BACKEND_BOUND</event>
        <event alias="e">INT_MISC.UOP_DROPPING</event>
        <event alias="f">TOPDOWN.SLOTS:perf_metrics</event>
        <event alias="g">INT_MISC.RECOVERY_CYCLES:c1:e1</event>
        <event alias="h">BR_MISP_RETIRED.ALL_BRANCHES</event>
        <event alias="i">MACHINE_CLEARS.COUNT</event>
        <formula>100 * ( ( ( 0 ) &gt; ( ( ( ( 1 - ( ( a / ( ( a + b + c + d ) ) - e / ( f ) ) + ( d / ( ( a + b + c + d ) ) + ( ( 5 ) * g ) / ( f ) ) + ( c / ( ( a + b + c + d ) ) ) ) ) &gt; ( 0 ) ) ? ( 1 - ( ( a / ( ( a + b + c + d ) ) - e / ( f ) ) + ( d / ( ( a + b + c + d ) ) + ( ( 5 ) * g ) / ( f ) ) + ( c / ( ( a + b + c + d ) ) ) ) ) : ( 0 ) ) - ( ( h / ( h + i ) ) * ( ( ( 1 - ( ( a / ( ( a + b + c + d ) ) - e / ( f ) ) + ( d / ( ( a + b + c + d ) ) + ( ( 5 ) * g ) / ( f ) ) + ( c / ( ( a + b + c + d ) ) ) ) ) &gt; ( 0 ) ) ? ( 1 - ( ( a / ( ( a + b + c + d ) ) - e / ( f ) ) + ( d / ( ( a + b + c + d ) ) + ( ( 5 ) * g ) / ( f ) ) + ( c / ( ( a + b + c + d ) ) ) ) ) : ( 0 ) ) ) ) ) ? ( 0 ) : ( ( ( ( 1 - ( ( a / ( ( a + b + c + d ) ) - e / ( f ) ) + ( d / ( ( a + b + c + d ) ) + ( ( 5 ) * g ) / ( f ) ) + ( c / ( ( a + b + c + d ) ) ) ) ) &gt; ( 0 ) ) ? ( 1 - ( ( a / ( ( a + b + c + d ) ) - e / ( f ) ) + ( d / ( ( a + b + c + d ) ) + ( ( 5 ) * g ) / ( f ) ) + ( c / ( ( a + b + c + d ) ) ) ) ) : ( 0 ) ) - ( ( h / ( h + i ) ) * ( ( ( 1 - ( ( a / ( ( a + b + c + d ) ) - e / ( f ) ) + ( d / ( ( a + b + c + d ) ) + ( ( 5 ) * g ) / ( f ) ) + ( c / ( ( a + b + c + d ) ) ) ) ) &gt; ( 0 ) ) ? ( 1 - ( ( a / ( ( a + b + c + d ) ) - e / ( f ) ) + ( d / ( ( a + b + c + d ) ) + ( ( 5 ) * g ) / ( f ) ) + ( c / ( ( a + b + c + d ) ) ) ) ) : ( 0 ) ) ) ) )</formula>
    </metric>

    <metric name="metric_TMA_Backend_Bound(%)">
        <event alias="a">PERF_METRICS.BACKEND_BOUND</event>
        <event alias="b">PERF_METRICS.FRONTEND_BOUND</event>
        <event alias="c">PERF_METRICS.BAD_SPECULATION</event>
        <event alias="d">PERF_METRICS.RETIRING</event>
        <event alias="e">INT_MISC.RECOVERY_CYCLES:c1:e1</event>
        <event alias="f">TOPDOWN.SLOTS:perf_metrics</event>
        <formula>100 * ( a / ( ( b + c + d + a ) ) + ( ( 5 ) * e ) / ( f ) )</formula>
    </metric>

    <metric name="metric_TMA_..Memory_Bound(%)">
        <event alias="a">CYCLE_ACTIVITY.STALLS_MEM_ANY</event>
        <event alias="b">EXE_ACTIVITY.BOUND_ON_STORES</event>
        <event alias="c">CYCLE_ACTIVITY.STALLS_TOTAL</event>
        <event alias="d">EXE_ACTIVITY.1_PORTS_UTIL</event>
        <event alias="e">PERF_METRICS.RETIRING</event>
        <event alias="f">PERF_METRICS.FRONTEND_BOUND</event>
        <event alias="g">PERF_METRICS.BAD_SPECULATION</event>
        <event alias="h">PERF_METRICS.BACKEND_BOUND</event>
        <event alias="i">EXE_ACTIVITY.2_PORTS_UTIL</event>
        <event alias="j">INT_MISC.RECOVERY_CYCLES:c1:e1</event>
        <event alias="k">TOPDOWN.SLOTS:perf_metrics</event>
        <formula>100 * ( ( ( a + b ) / ( c + ( d + ( e / ( ( f + g + e + h ) ) ) * i ) + b ) ) * ( h / ( ( f + g + e + h ) ) + ( ( 5 ) * j ) / ( k ) ) )</formula>
    </metric>

    <metric name="metric_TMA_....L1_Bound(%)">
        <event alias="a">CYCLE_ACTIVITY.STALLS_MEM_ANY</event>
        <event alias="b">CYCLE_ACTIVITY.STALLS_L1D_MISS</event>
        <event alias="c">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( ( ( ( a - b ) / ( c ) ) &gt; ( 0 ) ) ? ( ( a - b ) / ( c ) ) : ( 0 ) )</formula>
    </metric>

    <metric name="metric_TMA_......DTLB_Load(%)">
        <event alias="a">DTLB_LOAD_MISSES.STLB_HIT</event>
        <event alias="b">DTLB_LOAD_MISSES.WALK_ACTIVE</event>
        <event alias="c">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( ( ( 7 ) * a + b ) / ( c ) )</formula>
    </metric>

    <metric name="metric_TMA_........Load_STLB_Hit(%)">
        <event alias="a">DTLB_LOAD_MISSES.STLB_HIT</event>
        <event alias="b">DTLB_LOAD_MISSES.WALK_ACTIVE</event>
        <event alias="c">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( ( ( ( 7 ) * a + b ) / ( c ) ) - ( b / ( c ) ) )</formula>
    </metric>

    <metric name="metric_TMA_........Load_STLB_Miss(%)">
        <event alias="a">DTLB_LOAD_MISSES.WALK_ACTIVE</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( a / ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_......Store_Fwd_Blk(%)">
        <event alias="a">LD_BLOCKS.STORE_FORWARD</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( 13 * a / ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_......Lock_Latency(%)">
        <event alias="a">MEM_INST_RETIRED.LOCK_LOADS</event>
        <event alias="b">MEM_INST_RETIRED.ALL_STORES</event>
        <event alias="c">CPU_CLK_UNHALTED.THREAD</event>
        <event alias="d">OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_RFO</event>
        <formula>100 * ( ( a / b ) * ( ( ( c - 0 ) &lt; ( d ) ) ? ( c ) : ( d ) ) / ( c ) )</formula>
    </metric>

    <metric name="metric_TMA_......Split_Loads(%)">
        <event alias="a">L1D_PEND_MISS.PENDING</event>
        <event alias="b">MEM_LOAD_RETIRED.L1_MISS</event>
        <event alias="c">MEM_LOAD_RETIRED.FB_HIT</event>
        <event alias="d">LD_BLOCKS.NO_SR</event>
        <event alias="e">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( ( a / ( b + c ) ) * d / ( e ) )</formula>
    </metric>

    <metric name="metric_TMA_......4K_Aliasing(%)">
        <event alias="a">LD_BLOCKS_PARTIAL.ADDRESS_ALIAS</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( a / ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_......FB_Full(%)">
        <event alias="a">L1D_PEND_MISS.FB_FULL</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( a / ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_....L2_Bound(%)">
        <event alias="a">MEM_LOAD_RETIRED.L2_HIT</event>
        <event alias="b">MEM_LOAD_RETIRED.FB_HIT</event>
        <event alias="c">MEM_LOAD_RETIRED.L1_MISS</event>
        <event alias="d">L1D_PEND_MISS.FB_FULL_PERIODS</event>
        <event alias="e">CYCLE_ACTIVITY.STALLS_L1D_MISS</event>
        <event alias="f">CYCLE_ACTIVITY.STALLS_L2_MISS</event>
        <event alias="g">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( ( ( a * ( 1 + ( b / ( c ) ) ) ) / ( ( a * ( 1 + ( b / ( c ) ) ) ) + d ) ) * ( ( e - f ) / ( g ) ) )</formula>
    </metric>

    <metric name="metric_TMA_....L3_Bound(%)">
        <event alias="a">CYCLE_ACTIVITY.STALLS_L2_MISS</event>
        <event alias="b">CYCLE_ACTIVITY.STALLS_L3_MISS</event>
        <event alias="c">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( ( a - b ) / ( c ) )</formula>
    </metric>

    <metric name="metric_TMA_......Contested_Accesses(%)">
        <event alias="a">MEM_LOAD_L3_HIT_RETIRED.XSNP_FWD</event>
        <event alias="b">OCR.DEMAND_DATA_RD.L3_HIT.SNOOP_HITM</event>
        <event alias="c">OCR.DEMAND_DATA_RD.L3_HIT.SNOOP_HIT_WITH_FWD</event>
        <event alias="d">MEM_LOAD_L3_HIT_RETIRED.XSNP_MISS</event>
        <event alias="e">MEM_LOAD_RETIRED.FB_HIT</event>
        <event alias="f">MEM_LOAD_RETIRED.L1_MISS</event>
        <event alias="g">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( ( ( 60 ) * ( a * ( b / ( b + c ) ) ) + ( 43 ) * ( d ) ) * ( 1 + ( e / ( f ) ) / 2 ) / ( g ) )</formula>
    </metric>

    <metric name="metric_TMA_......Data_Sharing(%)">
        <event alias="a">MEM_LOAD_L3_HIT_RETIRED.XSNP_NO_FWD</event>
        <event alias="b">MEM_LOAD_L3_HIT_RETIRED.XSNP_FWD</event>
        <event alias="c">OCR.DEMAND_DATA_RD.L3_HIT.SNOOP_HITM</event>
        <event alias="d">OCR.DEMAND_DATA_RD.L3_HIT.SNOOP_HIT_WITH_FWD</event>
        <event alias="e">MEM_LOAD_RETIRED.FB_HIT</event>
        <event alias="f">MEM_LOAD_RETIRED.L1_MISS</event>
        <event alias="g">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( ( 43 ) * ( a + b * ( 1 - ( c / ( c + d ) ) ) ) * ( 1 + ( e / ( f ) ) / 2 ) / ( g ) )</formula>
    </metric>

    <metric name="metric_TMA_......L3_Hit_Latency(%)">
        <event alias="a">MEM_LOAD_RETIRED.L3_HIT</event>
        <event alias="b">MEM_LOAD_RETIRED.FB_HIT</event>
        <event alias="c">MEM_LOAD_RETIRED.L1_MISS</event>
        <event alias="d">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( ( 29 ) * ( a ) * ( 1 + ( b / ( c ) ) / 2 ) / ( d ) )</formula>
    </metric>

    <metric name="metric_TMA_......SQ_Full(%)">
        <event alias="a">L1D_PEND_MISS.L2_STALL</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( a / ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_....DRAM_Bound(%)">
        <event alias="a">CYCLE_ACTIVITY.STALLS_L3_MISS</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <event alias="c">CYCLE_ACTIVITY.STALLS_L1D_MISS</event>
        <event alias="d">CYCLE_ACTIVITY.STALLS_L2_MISS</event>
        <event alias="e">MEM_LOAD_RETIRED.L2_HIT</event>
        <event alias="f">MEM_LOAD_RETIRED.FB_HIT</event>
        <event alias="g">MEM_LOAD_RETIRED.L1_MISS</event>
        <event alias="h">L1D_PEND_MISS.FB_FULL_PERIODS</event>
        <formula>100 * ( ( a / ( b ) + ( ( c - d ) / ( b ) ) - ( ( ( e * ( 1 + ( f / ( g ) ) ) ) / ( ( e * ( 1 + ( f / ( g ) ) ) ) + h ) ) * ( ( c - d ) / ( b ) ) ) ) )</formula>
    </metric>

    <metric name="metric_TMA_......MEM_Bandwidth(%)">
        <event alias="a">CPU_CLK_UNHALTED.THREAD</event>
        <event alias="b">OFFCORE_REQUESTS_OUTSTANDING.ALL_DATA_RD:c4</event>
        <formula>100 * ( ( ( ( a - 0 ) &lt; ( b ) ) ? ( a ) : ( b ) ) / ( a ) )</formula>
    </metric>

    <metric name="metric_TMA_......MEM_Latency(%)">
        <event alias="a">CPU_CLK_UNHALTED.THREAD</event>
        <event alias="b">OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DATA_RD</event>
        <event alias="c">OFFCORE_REQUESTS_OUTSTANDING.ALL_DATA_RD:c4</event>
        <formula>100 * ( ( ( ( a - 0 ) &lt; ( b ) ) ? ( a ) : ( b ) ) / ( a ) - ( ( ( ( a - 0 ) &lt; ( c ) ) ? ( a ) : ( c ) ) / ( a ) ) )</formula>
    </metric>

    <metric name="metric_TMA_....Store_Bound(%)">
        <event alias="a">EXE_ACTIVITY.BOUND_ON_STORES</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( a / ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_......Store_Latency(%)">
        <event alias="a">L2_RQSTS.RFO_HIT</event>
        <event alias="b">MEM_INST_RETIRED.LOCK_LOADS</event>
        <event alias="c">MEM_INST_RETIRED.ALL_STORES</event>
        <event alias="d">CPU_CLK_UNHALTED.THREAD</event>
        <event alias="e">OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_RFO</event>
        <formula>100 * ( ( ( a * ( 10 ) * ( 1 - ( b / c ) ) ) + ( 1 - ( b / c ) ) * ( ( ( d - 0 ) &lt; ( e ) ) ? ( d ) : ( e ) ) ) / ( d ) )</formula>
    </metric>

    <metric name="metric_TMA_......False_Sharing(%)">
        <event alias="a">OCR.DEMAND_RFO.L3_HIT.SNOOP_HITM</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( ( 60 ) * a / ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_......Split_Stores(%)">
        <event alias="a">MEM_INST_RETIRED.SPLIT_STORES</event>
        <event alias="b">CPU_CLK_UNHALTED.DISTRIBUTED</event>
        <formula>100 * ( a / ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_......DTLB_Store(%)">
        <event alias="a">DTLB_STORE_MISSES.STLB_HIT</event>
        <event alias="b">DTLB_STORE_MISSES.WALK_ACTIVE</event>
        <event alias="c">CPU_CLK_UNHALTED.DISTRIBUTED</event>
        <formula>100 * ( ( ( 7 ) * a + b ) / ( c ) )</formula>
    </metric>

    <metric name="metric_TMA_........Store_STLB_Hit(%)">
        <event alias="a">DTLB_STORE_MISSES.STLB_HIT</event>
        <event alias="b">DTLB_STORE_MISSES.WALK_ACTIVE</event>
        <event alias="c">CPU_CLK_UNHALTED.DISTRIBUTED</event>
        <formula>100 * ( ( ( ( 7 ) * a + b ) / ( c ) ) - ( b / ( c ) ) )</formula>
    </metric>

    <metric name="metric_TMA_........Store_STLB_Miss(%)">
        <event alias="a">DTLB_STORE_MISSES.WALK_ACTIVE</event>
        <event alias="b">CPU_CLK_UNHALTED.DISTRIBUTED</event>
        <formula>100 * ( a / ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_..Core_Bound(%)">
        <event alias="a">PERF_METRICS.BACKEND_BOUND</event>
        <event alias="b">PERF_METRICS.FRONTEND_BOUND</event>
        <event alias="c">PERF_METRICS.BAD_SPECULATION</event>
        <event alias="d">PERF_METRICS.RETIRING</event>
        <event alias="e">INT_MISC.RECOVERY_CYCLES:c1:e1</event>
        <event alias="f">TOPDOWN.SLOTS:perf_metrics</event>
        <event alias="g">CYCLE_ACTIVITY.STALLS_MEM_ANY</event>
        <event alias="h">EXE_ACTIVITY.BOUND_ON_STORES</event>
        <event alias="i">CYCLE_ACTIVITY.STALLS_TOTAL</event>
        <event alias="j">EXE_ACTIVITY.1_PORTS_UTIL</event>
        <event alias="k">EXE_ACTIVITY.2_PORTS_UTIL</event>
        <formula>100 * ( ( ( 0 ) &gt; ( ( a / ( ( b + c + d + a ) ) + ( ( 5 ) * e ) / ( f ) ) - ( ( ( g + h ) / ( i + ( j + ( d / ( ( b + c + d + a ) ) ) * k ) + h ) ) * ( a / ( ( b + c + d + a ) ) + ( ( 5 ) * e ) / ( f ) ) ) ) ) ? ( 0 ) : ( ( a / ( ( b + c + d + a ) ) + ( ( 5 ) * e ) / ( f ) ) - ( ( ( g + h ) / ( i + ( j + ( d / ( ( b + c + d + a ) ) ) * k ) + h ) ) * ( a / ( ( b + c + d + a ) ) + ( ( 5 ) * e ) / ( f ) ) ) ) )</formula>
    </metric>

    <metric name="metric_TMA_....Divider(%)">
        <event alias="a">ARITH.DIVIDER_ACTIVE</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( a / ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_....Ports_Utilization(%)">
        <event alias="a">CYCLE_ACTIVITY.STALLS_TOTAL</event>
        <event alias="b">CYCLE_ACTIVITY.STALLS_MEM_ANY</event>
        <event alias="c">EXE_ACTIVITY.1_PORTS_UTIL</event>
        <event alias="d">PERF_METRICS.RETIRING</event>
        <event alias="e">PERF_METRICS.FRONTEND_BOUND</event>
        <event alias="f">PERF_METRICS.BAD_SPECULATION</event>
        <event alias="g">PERF_METRICS.BACKEND_BOUND</event>
        <event alias="h">EXE_ACTIVITY.2_PORTS_UTIL</event>
        <event alias="i">CPU_CLK_UNHALTED.THREAD</event>
        <event alias="j">ARITH.DIVIDER_ACTIVE</event>
        <formula>100 * ( ( ( ( j - 0 ) &lt; ( ( a - b ) / ( i ) ) * ( i ) ) ) ? ( ( a - b + ( c + ( d / ( ( e + f + d + g ) ) ) * h ) ) / ( i ) ) : ( ( c + ( d / ( ( e + f + d + g ) ) ) * h ) / ( i ) ) )</formula>
    </metric>

    <metric name="metric_TMA_......Ports_Utilized_0(%)">
        <event alias="a">CYCLE_ACTIVITY.STALLS_TOTAL</event>
        <event alias="b">CYCLE_ACTIVITY.STALLS_MEM_ANY</event>
        <event alias="c">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( ( a - b ) / ( c ) )</formula>
    </metric>

    <metric name="metric_TMA_........Serializing_Operation(%)">
        <event alias="a">RESOURCE_STALLS.SCOREBOARD</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( a / ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_..........Slow_Pause(%)">
        <event alias="a">MISC_RETIRED.PAUSE_INST</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( 140 * a / ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_........Mixing_Vectors(%)">
        <event alias="a">UOPS_ISSUED.VECTOR_WIDTH_MISMATCH</event>
        <event alias="b">UOPS_ISSUED.ANY</event>
        <formula>100 * ( a / b )</formula>
    </metric>

    <metric name="metric_TMA_......Ports_Utilized_1(%)">
        <event alias="a">EXE_ACTIVITY.1_PORTS_UTIL</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( a / ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_......Ports_Utilized_2(%)">
        <event alias="a">EXE_ACTIVITY.2_PORTS_UTIL</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( a / ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_......Ports_Utilized_3m(%)">
        <event alias="a">UOPS_EXECUTED.CYCLES_GE_3</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100 * ( a / ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_........ALU_Op_Utilization(%)">
        <event alias="a">UOPS_DISPATCHED.PORT_0</event>
        <event alias="b">UOPS_DISPATCHED.PORT_1</event>
        <event alias="c">UOPS_DISPATCHED.PORT_5</event>
        <event alias="d">UOPS_DISPATCHED.PORT_6</event>
        <event alias="e">CPU_CLK_UNHALTED.DISTRIBUTED</event>
        <formula>100 * ( ( a + b + c + d ) / ( 4 * ( e ) ) )</formula>
    </metric>

    <metric name="metric_TMA_..........Port_0(%)">
        <event alias="a">UOPS_DISPATCHED.PORT_0</event>
        <event alias="b">CPU_CLK_UNHALTED.DISTRIBUTED</event>
        <formula>100 * ( a / ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_..........Port_1(%)">
        <event alias="a">UOPS_DISPATCHED.PORT_1</event>
        <event alias="b">CPU_CLK_UNHALTED.DISTRIBUTED</event>
        <formula>100 * ( a / ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_..........Port_5(%)">
        <event alias="a">UOPS_DISPATCHED.PORT_5</event>
        <event alias="b">CPU_CLK_UNHALTED.DISTRIBUTED</event>
        <formula>100 * ( a / ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_..........Port_6(%)">
        <event alias="a">UOPS_DISPATCHED.PORT_6</event>
        <event alias="b">CPU_CLK_UNHALTED.DISTRIBUTED</event>
        <formula>100 * ( a / ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_........Load_Op_Utilization(%)">
        <event alias="a">UOPS_DISPATCHED.PORT_2_3</event>
        <event alias="b">CPU_CLK_UNHALTED.DISTRIBUTED</event>
        <formula>100 * ( a / ( 2 * ( b ) ) )</formula>
    </metric>

    <metric name="metric_TMA_........Store_Op_Utilization(%)">
        <event alias="a">UOPS_DISPATCHED.PORT_4_9</event>
        <event alias="b">UOPS_DISPATCHED.PORT_7_8</event>
        <event alias="c">CPU_CLK_UNHALTED.DISTRIBUTED</event>
        <formula>100 * ( ( a + b ) / ( 4 * ( c ) ) )</formula>
    </metric>

    <metric name="metric_TMA_Retiring(%)">
        <event alias="a">PERF_METRICS.RETIRING</event>
        <event alias="b">PERF_METRICS.FRONTEND_BOUND</event>
        <event alias="c">PERF_METRICS.BAD_SPECULATION</event>
        <event alias="d">PERF_METRICS.BACKEND_BOUND</event>
        <formula>100 * ( a / ( ( b + c + a + d ) ) )</formula>
    </metric>

    <metric name="metric_TMA_..Light_Operations(%)">
        <event alias="a">PERF_METRICS.RETIRING</event>
        <event alias="b">PERF_METRICS.FRONTEND_BOUND</event>
        <event alias="c">PERF_METRICS.BAD_SPECULATION</event>
        <event alias="d">PERF_METRICS.BACKEND_BOUND</event>
        <event alias="e">TOPDOWN.SLOTS:perf_metrics</event>
        <event alias="f">UOPS_ISSUED.ANY</event>
        <event alias="g">IDQ.MS_UOPS</event>
        <formula>100 * ( ( ( 0 ) &gt; ( ( a / ( ( b + c + a + d ) ) ) - ( ( ( ( ( a / ( ( b + c + a + d ) ) ) * ( e ) ) / f ) * g / ( e ) ) ) ) ) ? ( 0 ) : ( ( a / ( ( b + c + a + d ) ) ) - ( ( ( ( ( a / ( ( b + c + a + d ) ) ) * ( e ) ) / f ) * g / ( e ) ) ) ) )</formula>
    </metric>

    <metric name="metric_TMA_....FP_Arith(%)">
        <event alias="a">UOPS_EXECUTED.X87</event>
        <event alias="b">UOPS_EXECUTED.THREAD</event>
        <event alias="c">FP_ARITH_INST_RETIRED.SCALAR_SINGLE</event>
        <event alias="d">FP_ARITH_INST_RETIRED.SCALAR_DOUBLE</event>
        <event alias="e">PERF_METRICS.RETIRING</event>
        <event alias="f">PERF_METRICS.FRONTEND_BOUND</event>
        <event alias="g">PERF_METRICS.BAD_SPECULATION</event>
        <event alias="h">PERF_METRICS.BACKEND_BOUND</event>
        <event alias="i">TOPDOWN.SLOTS:perf_metrics</event>
        <event alias="j">FP_ARITH_INST_RETIRED.128B_PACKED_DOUBLE</event>
        <event alias="k">FP_ARITH_INST_RETIRED.128B_PACKED_SINGLE</event>
        <event alias="l">FP_ARITH_INST_RETIRED.256B_PACKED_DOUBLE</event>
        <event alias="m">FP_ARITH_INST_RETIRED.256B_PACKED_SINGLE</event>
        <event alias="n">FP_ARITH_INST_RETIRED.512B_PACKED_DOUBLE</event>
        <event alias="o">FP_ARITH_INST_RETIRED.512B_PACKED_SINGLE</event>
        <formula>100 * ( ( a / b ) + ( ( c + d ) / ( ( e / ( ( f + g + e + h ) ) ) * ( i ) ) ) + ( ( j + k + l + m + n + o ) / ( ( e / ( ( f + g + e + h ) ) ) * ( i ) ) ) )</formula>
    </metric>

    <metric name="metric_TMA_......X87_Use(%)">
        <event alias="a">UOPS_EXECUTED.X87</event>
        <event alias="b">UOPS_EXECUTED.THREAD</event>
        <formula>100 * ( a / b )</formula>
    </metric>

    <metric name="metric_TMA_......FP_Scalar(%)">
        <event alias="a">FP_ARITH_INST_RETIRED.SCALAR_SINGLE</event>
        <event alias="b">FP_ARITH_INST_RETIRED.SCALAR_DOUBLE</event>
        <event alias="c">PERF_METRICS.RETIRING</event>
        <event alias="d">PERF_METRICS.FRONTEND_BOUND</event>
        <event alias="e">PERF_METRICS.BAD_SPECULATION</event>
        <event alias="f">PERF_METRICS.BACKEND_BOUND</event>
        <event alias="g">TOPDOWN.SLOTS:perf_metrics</event>
        <formula>100 * ( ( a + b ) / ( ( c / ( ( d + e + c + f ) ) ) * ( g ) ) )</formula>
    </metric>

    <metric name="metric_TMA_......FP_Vector(%)">
        <event alias="a">FP_ARITH_INST_RETIRED.128B_PACKED_DOUBLE</event>
        <event alias="b">FP_ARITH_INST_RETIRED.128B_PACKED_SINGLE</event>
        <event alias="c">FP_ARITH_INST_RETIRED.256B_PACKED_DOUBLE</event>
        <event alias="d">FP_ARITH_INST_RETIRED.256B_PACKED_SINGLE</event>
        <event alias="e">FP_ARITH_INST_RETIRED.512B_PACKED_DOUBLE</event>
        <event alias="f">FP_ARITH_INST_RETIRED.512B_PACKED_SINGLE</event>
        <event alias="g">PERF_METRICS.RETIRING</event>
        <event alias="h">PERF_METRICS.FRONTEND_BOUND</event>
        <event alias="i">PERF_METRICS.BAD_SPECULATION</event>
        <event alias="j">PERF_METRICS.BACKEND_BOUND</event>
        <event alias="k">TOPDOWN.SLOTS:perf_metrics</event>
        <formula>100 * ( ( a + b + c + d + e + f ) / ( ( g / ( ( h + i + g + j ) ) ) * ( k ) ) )</formula>
    </metric>

    <metric name="metric_TMA_....Other_Light_Ops(%)">
        <event alias="a">UOPS_EXECUTED.X87</event>
        <event alias="b">UOPS_EXECUTED.THREAD</event>
        <event alias="c">FP_ARITH_INST_RETIRED.SCALAR_SINGLE</event>
        <event alias="d">FP_ARITH_INST_RETIRED.SCALAR_DOUBLE</event>
        <event alias="e">PERF_METRICS.RETIRING</event>
        <event alias="f">PERF_METRICS.FRONTEND_BOUND</event>
        <event alias="g">PERF_METRICS.BAD_SPECULATION</event>
        <event alias="h">PERF_METRICS.BACKEND_BOUND</event>
        <event alias="i">TOPDOWN.SLOTS:perf_metrics</event>
        <event alias="j">FP_ARITH_INST_RETIRED.128B_PACKED_DOUBLE</event>
        <event alias="k">FP_ARITH_INST_RETIRED.128B_PACKED_SINGLE</event>
        <event alias="l">FP_ARITH_INST_RETIRED.256B_PACKED_DOUBLE</event>
        <event alias="m">FP_ARITH_INST_RETIRED.256B_PACKED_SINGLE</event>
        <event alias="n">FP_ARITH_INST_RETIRED.512B_PACKED_DOUBLE</event>
        <event alias="o">FP_ARITH_INST_RETIRED.512B_PACKED_SINGLE</event>
        <formula>100 * ( 1 - ( ( a / b ) + ( ( c + d ) / ( ( e / ( ( f + g + e + h ) ) ) * ( i ) ) ) + ( ( j + k + l + m + n + o ) / ( ( e / ( ( f + g + e + h ) ) ) * ( i ) ) ) ) )</formula>
    </metric>

    <metric name="metric_TMA_..Heavy_Operations(%)">
        <event alias="a">PERF_METRICS.RETIRING</event>
        <event alias="b">PERF_METRICS.FRONTEND_BOUND</event>
        <event alias="c">PERF_METRICS.BAD_SPECULATION</event>
        <event alias="d">PERF_METRICS.BACKEND_BOUND</event>
        <event alias="e">TOPDOWN.SLOTS:perf_metrics</event>
        <event alias="f">UOPS_ISSUED.ANY</event>
        <event alias="g">IDQ.MS_UOPS</event>
        <formula>100 * ( ( ( ( ( a / ( ( b + c + a + d ) ) ) * ( e ) ) / f ) * g / ( e ) ) )</formula>
    </metric>

    <metric name="metric_TMA_....Microcode_Sequencer(%)">
        <event alias="a">PERF_METRICS.RETIRING</event>
        <event alias="b">PERF_METRICS.FRONTEND_BOUND</event>
        <event alias="c">PERF_METRICS.BAD_SPECULATION</event>
        <event alias="d">PERF_METRICS.BACKEND_BOUND</event>
        <event alias="e">TOPDOWN.SLOTS:perf_metrics</event>
        <event alias="f">UOPS_ISSUED.ANY</event>
        <event alias="g">IDQ.MS_UOPS</event>
        <formula>100 * ( ( ( ( a / ( ( b + c + a + d ) ) ) * ( e ) ) / f ) * g / ( e ) )</formula>
    </metric>

    <metric name="metric_TMA_......Assists(%)">
        <event alias="a">ASSISTS.ANY</event>
        <event alias="b">TOPDOWN.SLOTS:perf_metrics</event>
        <formula>100 * ( ( 100 ) * a / ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_Info_Bottleneck_Mispredictions">
        <event alias="a">BR_MISP_RETIRED.ALL_BRANCHES</event>
        <event alias="b">MACHINE_CLEARS.COUNT</event>
        <event alias="c">PERF_METRICS.FRONTEND_BOUND</event>
        <event alias="d">PERF_METRICS.BAD_SPECULATION</event>
        <event alias="e">PERF_METRICS.RETIRING</event>
        <event alias="f">PERF_METRICS.BACKEND_BOUND</event>
        <event alias="g">INT_MISC.UOP_DROPPING</event>
        <event alias="h">TOPDOWN.SLOTS:perf_metrics</event>
        <event alias="i">INT_MISC.RECOVERY_CYCLES:c1:e1</event>
        <event alias="j">IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE</event>
        <event alias="k">INT_MISC.CLEAR_RESTEER_CYCLES</event>
        <event alias="l">CPU_CLK_UNHALTED.THREAD</event>
        <event alias="m">ICACHE_16B.IFDATA_STALL</event>
        <event alias="n">ICACHE_64B.IFTAG_STALL</event>
        <event alias="o">BACLEARS.ANY</event>
        <event alias="p">DSB2MITE_SWITCHES.PENALTY_CYCLES</event>
        <event alias="q">ILD_STALL.LCP</event>
        <event alias="r">IDQ.MS_SWITCHES</event>
        <formula>100 * ( ( ( a / ( a + b ) ) * ( ( ( 1 - ( ( c / ( ( c + d + e + f ) ) - g / ( h ) ) + ( f / ( ( c + d + e + f ) ) + ( ( 5 ) * i ) / ( h ) ) + ( e / ( ( c + d + e + f ) ) ) ) ) &gt; ( 0 ) ) ? ( 1 - ( ( c / ( ( c + d + e + f ) ) - g / ( h ) ) + ( f / ( ( c + d + e + f ) ) + ( ( 5 ) * i ) / ( h ) ) + ( e / ( ( c + d + e + f ) ) ) ) ) : ( 0 ) ) ) + ( ( 5 ) * j / ( h ) ) * ( ( a / ( a + b ) ) * k / ( l ) ) / ( ( m / ( l ) ) + ( n / ( l ) ) + ( k / ( l ) + ( ( 10 ) * o / ( l ) ) ) + ( p / ( l ) ) + ( q / ( l ) ) + ( ( 3 ) * r / ( l ) ) ) )</formula>
    </metric>

    <metric name="metric_TMA_Info_Thread_CPI">
        <event alias="a">INST_RETIRED.ANY</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>1 / ( a / ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_Info_Thread_SLOTS">
        <event alias="a">TOPDOWN.SLOTS:perf_metrics</event>
        <formula>a</formula>
    </metric>

    <metric name="metric_TMA_Info_Thread_IPC">
        <event alias="a">INST_RETIRED.ANY</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>a / ( b )</formula>
    </metric>

    <metric name="metric_TMA_Info_Thread_UPI">
        <event alias="a">PERF_METRICS.RETIRING</event>
        <event alias="b">PERF_METRICS.FRONTEND_BOUND</event>
        <event alias="c">PERF_METRICS.BAD_SPECULATION</event>
        <event alias="d">PERF_METRICS.BACKEND_BOUND</event>
        <event alias="e">TOPDOWN.SLOTS:perf_metrics</event>
        <event alias="f">INST_RETIRED.ANY</event>
        <formula>( ( a / ( ( b + c + a + d ) ) ) * ( e ) ) / f</formula>
    </metric>

    <metric name="metric_TMA_Info_Thread_CLKS">
        <event alias="a">CPU_CLK_UNHALTED.THREAD</event>
        <formula>a</formula>
    </metric>

    <metric name="metric_TMA_Info_Thread_IpTB">
        <event alias="a">INST_RETIRED.ANY</event>
        <event alias="b">BR_INST_RETIRED.NEAR_TAKEN</event>
        <formula>a / b</formula>
    </metric>

    <metric name="metric_TMA_Info_Inst_Mix_IpFLOP">
        <event alias="a">INST_RETIRED.ANY</event>
        <event alias="b">FP_ARITH_INST_RETIRED.SCALAR_SINGLE</event>
        <event alias="c">FP_ARITH_INST_RETIRED.SCALAR_DOUBLE</event>
        <event alias="d">FP_ARITH_INST_RETIRED.128B_PACKED_DOUBLE</event>
        <event alias="e">FP_ARITH_INST_RETIRED.128B_PACKED_SINGLE</event>
        <event alias="f">FP_ARITH_INST_RETIRED.256B_PACKED_DOUBLE</event>
        <event alias="g">FP_ARITH_INST_RETIRED.256B_PACKED_SINGLE</event>
        <event alias="h">FP_ARITH_INST_RETIRED.512B_PACKED_DOUBLE</event>
        <event alias="i">FP_ARITH_INST_RETIRED.512B_PACKED_SINGLE</event>
        <formula>a / ( ( 1 * ( b + c ) + 2 * d + 4 * ( e + f ) + 8 * ( g + h ) + 16 * i ) )</formula>
    </metric>

    <metric name="metric_TMA_Info_Inst_Mix_IpArith_AVX128">
        <event alias="a">INST_RETIRED.ANY</event>
        <event alias="b">FP_ARITH_INST_RETIRED.128B_PACKED_DOUBLE</event>
        <event alias="c">FP_ARITH_INST_RETIRED.128B_PACKED_SINGLE</event>
        <formula>a / ( b + c )</formula>
    </metric>

    <metric name="metric_TMA_Info_Inst_Mix_BpTkBranch">
        <event alias="a">BR_INST_RETIRED.ALL_BRANCHES</event>
        <event alias="b">BR_INST_RETIRED.NEAR_TAKEN</event>
        <formula>a / b</formula>
    </metric>

    <metric name="metric_TMA_Info_Inst_Mix_IpBranch">
        <event alias="a">INST_RETIRED.ANY</event>
        <event alias="b">BR_INST_RETIRED.ALL_BRANCHES</event>
        <formula>a / b</formula>
    </metric>

    <metric name="metric_TMA_Info_Inst_Mix_IpArith_AVX512">
        <event alias="a">INST_RETIRED.ANY</event>
        <event alias="b">FP_ARITH_INST_RETIRED.512B_PACKED_DOUBLE</event>
        <event alias="c">FP_ARITH_INST_RETIRED.512B_PACKED_SINGLE</event>
        <formula>a / ( b + c )</formula>
    </metric>

    <metric name="metric_TMA_Info_Inst_Mix_IpArith_AVX256">
        <event alias="a">INST_RETIRED.ANY</event>
        <event alias="b">FP_ARITH_INST_RETIRED.256B_PACKED_DOUBLE</event>
        <event alias="c">FP_ARITH_INST_RETIRED.256B_PACKED_SINGLE</event>
        <formula>a / ( b + c )</formula>
    </metric>

    <metric name="metric_TMA_Info_Inst_Mix_IpStore">
        <event alias="a">INST_RETIRED.ANY</event>
        <event alias="b">MEM_INST_RETIRED.ALL_STORES</event>
        <formula>a / b</formula>
    </metric>

    <metric name="metric_TMA_Info_Inst_Mix_IpArith">
        <event alias="a">INST_RETIRED.ANY</event>
        <event alias="b">FP_ARITH_INST_RETIRED.SCALAR_SINGLE</event>
        <event alias="c">FP_ARITH_INST_RETIRED.SCALAR_DOUBLE</event>
        <event alias="d">FP_ARITH_INST_RETIRED.128B_PACKED_DOUBLE</event>
        <event alias="e">FP_ARITH_INST_RETIRED.128B_PACKED_SINGLE</event>
        <event alias="f">FP_ARITH_INST_RETIRED.256B_PACKED_DOUBLE</event>
        <event alias="g">FP_ARITH_INST_RETIRED.256B_PACKED_SINGLE</event>
        <event alias="h">FP_ARITH_INST_RETIRED.512B_PACKED_DOUBLE</event>
        <event alias="i">FP_ARITH_INST_RETIRED.512B_PACKED_SINGLE</event>
        <formula>a / ( ( b + c ) + ( d + e + f + g + h + i ) )</formula>
    </metric>

    <metric name="metric_TMA_Info_Inst_Mix_IpLoad">
        <event alias="a">INST_RETIRED.ANY</event>
        <event alias="b">MEM_INST_RETIRED.ALL_LOADS</event>
        <formula>a / b</formula>
    </metric>

    <metric name="metric_TMA_Info_Inst_Mix_IpArith_Scalar_DP">
        <event alias="a">INST_RETIRED.ANY</event>
        <event alias="b">FP_ARITH_INST_RETIRED.SCALAR_DOUBLE</event>
        <formula>a / b</formula>
    </metric>

    <metric name="metric_TMA_Info_Inst_Mix_IpCall">
        <event alias="a">INST_RETIRED.ANY</event>
        <event alias="b">BR_INST_RETIRED.NEAR_CALL</event>
        <formula>a / b</formula>
    </metric>

    <metric name="metric_TMA_Info_Inst_Mix_IpArith_Scalar_SP">
        <event alias="a">INST_RETIRED.ANY</event>
        <event alias="b">FP_ARITH_INST_RETIRED.SCALAR_SINGLE</event>
        <formula>a / b</formula>
    </metric>

    <metric name="metric_TMA_Info_Inst_Mix_Instructions">
        <event alias="a">INST_RETIRED.ANY</event>
        <formula>a</formula>
    </metric>

    <metric name="metric_TMA_Info_Frontend_LSD_Coverage">
        <event alias="a">LSD.UOPS</event>
        <event alias="b">IDQ.DSB_UOPS</event>
        <event alias="c">IDQ.MITE_UOPS</event>
        <event alias="d">IDQ.MS_UOPS</event>
        <formula>a / ( b + a + c + d )</formula>
    </metric>

    <metric name="metric_TMA_Info_Frontend_DSB_Coverage">
        <event alias="a">IDQ.DSB_UOPS</event>
        <event alias="b">LSD.UOPS</event>
        <event alias="c">IDQ.MITE_UOPS</event>
        <event alias="d">IDQ.MS_UOPS</event>
        <formula>a / ( a + b + c + d )</formula>
    </metric>

    <metric name="metric_TMA_Info_Frontend_IpUnknown_Branch">
        <event alias="a">INST_RETIRED.ANY</event>
        <event alias="b">BACLEARS.ANY</event>
        <formula>( a ) / b</formula>
    </metric>

    <metric name="metric_TMA_Info_Core_CORE_CLKS">
        <event alias="a">CPU_CLK_UNHALTED.DISTRIBUTED</event>
        <formula>a</formula>
    </metric>

    <metric name="metric_TMA_Info_Core_ILP">
        <event alias="a">UOPS_EXECUTED.THREAD</event>
        <event alias="b">UOPS_EXECUTED.CORE_CYCLES_GE_1</event>
        <constant alias="threads">system.sockets[0][0].size</constant>
        <formula>a / ( ( threads &gt; 1 ) ? ( ( b / 2 ) ) : ( b ) )</formula>
    </metric>

    <metric name="metric_TMA_Info_Core_FP_Arith_Utilization">
        <event alias="a">FP_ARITH_INST_RETIRED.SCALAR_SINGLE</event>
        <event alias="b">FP_ARITH_INST_RETIRED.SCALAR_DOUBLE</event>
        <event alias="c">FP_ARITH_INST_RETIRED.128B_PACKED_DOUBLE</event>
        <event alias="d">FP_ARITH_INST_RETIRED.128B_PACKED_SINGLE</event>
        <event alias="e">FP_ARITH_INST_RETIRED.256B_PACKED_DOUBLE</event>
        <event alias="f">FP_ARITH_INST_RETIRED.256B_PACKED_SINGLE</event>
        <event alias="g">FP_ARITH_INST_RETIRED.512B_PACKED_DOUBLE</event>
        <event alias="h">FP_ARITH_INST_RETIRED.512B_PACKED_SINGLE</event>
        <event alias="i">CPU_CLK_UNHALTED.DISTRIBUTED</event>
        <formula>( ( a + b ) + ( c + d + e + f + g + h ) ) / ( 2 * ( i ) )</formula>
    </metric>

    <metric name="metric_TMA_Info_Core_IpMispredict">
        <event alias="a">INST_RETIRED.ANY</event>
        <event alias="b">BR_MISP_RETIRED.ALL_BRANCHES</event>
        <formula>a / b</formula>
    </metric>

    <metric name="metric_TMA_Info_Core_FLOPc">
        <event alias="a">FP_ARITH_INST_RETIRED.SCALAR_SINGLE</event>
        <event alias="b">FP_ARITH_INST_RETIRED.SCALAR_DOUBLE</event>
        <event alias="c">FP_ARITH_INST_RETIRED.128B_PACKED_DOUBLE</event>
        <event alias="d">FP_ARITH_INST_RETIRED.128B_PACKED_SINGLE</event>
        <event alias="e">FP_ARITH_INST_RETIRED.256B_PACKED_DOUBLE</event>
        <event alias="f">FP_ARITH_INST_RETIRED.256B_PACKED_SINGLE</event>
        <event alias="g">FP_ARITH_INST_RETIRED.512B_PACKED_DOUBLE</event>
        <event alias="h">FP_ARITH_INST_RETIRED.512B_PACKED_SINGLE</event>
        <event alias="i">CPU_CLK_UNHALTED.DISTRIBUTED</event>
        <formula>( ( 1 * ( a + b ) + 2 * c + 4 * ( d + e ) + 8 * ( f + g ) + 16 * h ) ) / ( i )</formula>
    </metric>

    <metric name="metric_TMA_Info_Core_Branch_Misprediction_Cost">
        <event alias="a">BR_MISP_RETIRED.ALL_BRANCHES</event>
        <event alias="b">MACHINE_CLEARS.COUNT</event>
        <event alias="c">PERF_METRICS.FRONTEND_BOUND</event>
        <event alias="d">PERF_METRICS.BAD_SPECULATION</event>
        <event alias="e">PERF_METRICS.RETIRING</event>
        <event alias="f">PERF_METRICS.BACKEND_BOUND</event>
        <event alias="g">INT_MISC.UOP_DROPPING</event>
        <event alias="h">TOPDOWN.SLOTS:perf_metrics</event>
        <event alias="i">INT_MISC.RECOVERY_CYCLES:c1:e1</event>
        <event alias="j">IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE</event>
        <event alias="k">INT_MISC.CLEAR_RESTEER_CYCLES</event>
        <event alias="l">CPU_CLK_UNHALTED.THREAD</event>
        <event alias="m">ICACHE_16B.IFDATA_STALL</event>
        <event alias="n">ICACHE_64B.IFTAG_STALL</event>
        <event alias="o">BACLEARS.ANY</event>
        <event alias="p">DSB2MITE_SWITCHES.PENALTY_CYCLES</event>
        <event alias="q">ILD_STALL.LCP</event>
        <event alias="r">IDQ.MS_SWITCHES</event>
        <formula>( ( ( a / ( a + b ) ) * ( ( ( 1 - ( ( c / ( ( c + d + e + f ) ) - g / ( h ) ) + ( f / ( ( c + d + e + f ) ) + ( ( 5 ) * i ) / ( h ) ) + ( e / ( ( c + d + e + f ) ) ) ) ) &gt; ( 0 ) ) ? ( 1 - ( ( c / ( ( c + d + e + f ) ) - g / ( h ) ) + ( f / ( ( c + d + e + f ) ) + ( ( 5 ) * i ) / ( h ) ) + ( e / ( ( c + d + e + f ) ) ) ) ) : ( 0 ) ) ) + ( ( 5 ) * j / ( h ) ) * ( ( a / ( a + b ) ) * k / ( l ) ) / ( ( m / ( l ) ) + ( n / ( l ) ) + ( k / ( l ) + ( ( 10 ) * o / ( l ) ) ) + ( p / ( l ) ) + ( q / ( l ) ) + ( ( 3 ) * r / ( l ) ) ) ) * ( h ) / a</formula>
    </metric>

    <metric name="metric_TMA_Info_Core_CoreIPC">
        <event alias="a">INST_RETIRED.ANY</event>
        <event alias="b">CPU_CLK_UNHALTED.DISTRIBUTED</event>
        <formula>a / ( b )</formula>
    </metric>

    <metric name="metric_TMA_Info_Memory_Load_Miss_Real_Latency">
        <event alias="a">L1D_PEND_MISS.PENDING</event>
        <event alias="b">MEM_LOAD_RETIRED.L1_MISS</event>
        <event alias="c">MEM_LOAD_RETIRED.FB_HIT</event>
        <formula>a / ( b + c )</formula>
    </metric>

    <metric name="metric_TMA_Info_Memory_L1MPKI_Load">
        <event alias="a">L2_RQSTS.ALL_DEMAND_DATA_RD</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>1000 * a / b</formula>
    </metric>

    <metric name="metric_TMA_Info_Memory_L1MPKI">
        <event alias="a">MEM_LOAD_RETIRED.L1_MISS</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>1000 * a / b</formula>
    </metric>

    <metric name="metric_TMA_Info_Memory_L2MPKI_All">
        <event alias="a">L2_RQSTS.MISS</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>1000 * a / b</formula>
    </metric>

    <metric name="metric_TMA_Info_Memory_L2HPKI_Load">
        <event alias="a">L2_RQSTS.DEMAND_DATA_RD_HIT</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>1000 * a / b</formula>
    </metric>

    <metric name="metric_TMA_Info_Memory_L2MPKI_Load">
        <event alias="a">L2_RQSTS.DEMAND_DATA_RD_MISS</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>1000 * a / b</formula>
    </metric>

    <metric name="metric_TMA_Info_Memory_FB_HPKI">
        <event alias="a">MEM_LOAD_RETIRED.FB_HIT</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>1000 * a / b</formula>
    </metric>

    <metric name="metric_TMA_Info_Memory_Page_Walks_Utilization">
        <event alias="a">ITLB_MISSES.WALK_PENDING</event>
        <event alias="b">DTLB_LOAD_MISSES.WALK_PENDING</event>
        <event alias="c">DTLB_STORE_MISSES.WALK_PENDING</event>
        <event alias="d">CPU_CLK_UNHALTED.DISTRIBUTED</event>
        <formula>( a + b + c ) / ( 2 * ( d ) )</formula>
    </metric>

    <metric name="metric_TMA_Info_Memory_L3MPKI">
        <event alias="a">MEM_LOAD_RETIRED.L3_MISS</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>1000 * a / b</formula>
    </metric>

    <metric name="metric_TMA_Info_Memory_L2HPKI_All">
        <event alias="a">L2_RQSTS.REFERENCES</event>
        <event alias="b">L2_RQSTS.MISS</event>
        <event alias="c">INST_RETIRED.ANY</event>
        <formula>1000 * ( a - b ) / c</formula>
    </metric>

    <metric name="metric_TMA_Info_Memory_L2MPKI">
        <event alias="a">MEM_LOAD_RETIRED.L2_MISS</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>1000 * a / b</formula>
    </metric>

    <metric name="metric_TMA_Info_Memory_MLP">
        <event alias="a">L1D_PEND_MISS.PENDING</event>
        <event alias="b">L1D_PEND_MISS.PENDING_CYCLES</event>
        <formula>a / b</formula>
    </metric>

    <metric name="metric_TMA_Info_System_Power_License2_Utilization">
        <event alias="a">CORE_POWER.LVL2_TURBO_LICENSE</event>
        <event alias="b">CPU_CLK_UNHALTED.DISTRIBUTED</event>
        <formula>a / ( b )</formula>
    </metric>

    <metric name="metric_TMA_Info_System_IpFarBranch">
        <event alias="a">INST_RETIRED.ANY</event>
        <event alias="b">BR_INST_RETIRED.FAR_BRANCH:USER</event>
        <formula>a / b</formula>
    </metric>

    <metric name="metric_TMA_Info_System_Socket_CLKS">
        <event alias="a">UNC_CLOCK.SOCKET</event>
        <formula>a</formula>
    </metric>

    <metric name="metric_TMA_Info_System_Turbo_Utilization">
        <event alias="a">CPU_CLK_UNHALTED.THREAD</event>
        <event alias="b">CPU_CLK_UNHALTED.REF_TSC</event>
        <formula>( a ) / b</formula>
    </metric>

    <metric name="metric_TMA_Info_System_SMT_2T_Utilization">
        <event alias="a">CPU_CLK_UNHALTED.ONE_THREAD_ACTIVE</event>
        <event alias="b">CPU_CLK_UNHALTED.REF_DISTRIBUTED</event>
        <constant alias="threads">system.sockets[0][0].size</constant>
        <formula>( threads &gt; 1 ) ? ( 1 - a / b ) : ( 0 )</formula>
    </metric>

    <metric name="metric_TMA_Info_System_MUX">
        <event alias="a">CPU_CLK_UNHALTED.THREAD_P</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>a / b</formula>
    </metric>

    <metric name="metric_TMA_Info_System_CPU_Utilization">
        <event alias="a">CPU_CLK_UNHALTED.REF_TSC</event>
        <event alias="b">TSC</event>
        <formula>a / b</formula>
    </metric>

    <metric name="metric_TMA_Info_System_Power_License0_Utilization">
        <event alias="a">CORE_POWER.LVL0_TURBO_LICENSE</event>
        <event alias="b">CPU_CLK_UNHALTED.DISTRIBUTED</event>
        <formula>a / ( b )</formula>
    </metric>

    <metric name="metric_TMA_Info_System_Power_License1_Utilization">
        <event alias="a">CORE_POWER.LVL1_TURBO_LICENSE</event>
        <event alias="b">CPU_CLK_UNHALTED.DISTRIBUTED</event>
        <formula>a / ( b )</formula>
    </metric>

    <metric name="metric_TMA_Info_System_Kernel_Utilization">
        <event alias="a">CPU_CLK_UNHALTED.THREAD_P:SUP</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>a / b</formula>
    </metric>

    <metric name="metric_EDP TGL Client XML version">
        <constant alias="version">4.23</constant>
        <formula>version</formula>
    </metric>

    <metric name="metric_TMA_Metrics_Version">
        <formula>4.152</formula>
    </metric>

</root>